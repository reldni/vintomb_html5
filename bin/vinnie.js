// Generated by Haxe 4.1.4
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var vinnie_Scene = function(game) {
	this.game = game;
	this.audio = game.audio;
	this.document = window.document;
	this.body = this.document.body;
	this.inventory = game.inventory;
	this.width = 300;
	this.height = 200;
	this.title = "";
	this.allowDragging = true;
	this.allowEndDragging = true;
	this.equippedItem = null;
	this.scale = 1;
};
$hxClasses["vinnie.Scene"] = vinnie_Scene;
vinnie_Scene.__name__ = "vinnie.Scene";
vinnie_Scene.prototype = {
	preload: function() {
		this.inventory.preloadItems();
		this.game.preloader.preloadArt(vinnie_Assets.vinnie);
		this.game.preloader.preloadArt(vinnie_Assets.vinnieShades);
		this.game.preloader.preloadArt(vinnie_Assets.info);
		this.game.preloader.preloadArt(vinnie_Assets.caution);
		this.game.preloader.preloadArt(vinnie_Assets.msgboxClose);
		this.game.preloader.preloadSound(vinnie_Assets.death);
		this.game.preloader.preloadSound(vinnie_Assets.getItem);
		this.game.preloader.preloadSound(vinnie_Assets.getItem);
		this.game.preloader.preloadSound(vinnie_Assets.completeScene);
		this.game.preloader.preloadSound(vinnie_Assets.eureka);
	}
	,registerSounds: function() {
		this.audio.registerSound(vinnie_Assets.death);
		this.audio.registerSound(vinnie_Assets.getItem);
		this.audio.registerSound(vinnie_Assets.getItem);
		this.audio.registerSound(vinnie_Assets.completeScene);
		this.audio.registerSound(vinnie_Assets.eureka);
	}
	,start: function() {
		this.registerSounds();
		this.mainView = this.document.createElement("div");
		this.mainView.style.padding = "0";
		this.mainView.style.margin = "0";
		this.mainView.style.position = "absolute";
		this.mainView.style.width = "" + this.width + "px";
		this.mainView.style.height = "" + this.height + "px";
		this.mainView.style.top = "50%";
		this.mainView.style.left = "50%";
		this.mainView.style.marginLeft = "-" + this.width / 2 + "px";
		this.mainView.style.marginTop = "-" + this.height / 2 + "px";
		this.mainView.style.overflow = "hidden";
		this.body.appendChild(this.mainView);
		this.mouseX = 0;
		this.mouseY = 0;
		this.mainView.onmousemove = $bind(this,this.onMouseMove);
		this.mainView.addEventListener("touchstart",$bind(this,this.onTouchStart));
		this.body.addEventListener("touchmove",$bind(this,this.onTouchMove));
		this.body.addEventListener("touchend",$bind(this,this.onTouchEnd));
		this.updatePosition();
		var newTitle = "Vinnie's Tomb";
		if(this.title != "" && this.title != null) {
			newTitle += " - " + this.title;
		}
		this.document.title = newTitle;
		this.inventory.hide();
		this.setCursor(null);
	}
	,end: function() {
		this.destroyView();
		this.audio.stopMusic();
		this.audio.unregisterAll();
	}
	,destroyView: function() {
		this.body.removeEventListener("touchmove",$bind(this,this.onTouchMove));
		this.body.removeEventListener("touchend",$bind(this,this.onTouchEnd));
		if(this.mainView != null) {
			if(this.mainView.parentNode != null) {
				this.mainView.parentNode.removeChild(this.mainView);
			}
			this.mainView.removeEventListener("touchstart",$bind(this,this.onTouchStart));
			this.mainView = null;
		}
		this.inventory.hide();
	}
	,updatePosition: function() {
		var screenWidth = window.innerWidth;
		var screenHeight = window.innerHeight;
		this.scale = Math.min(screenWidth / this.width,screenHeight / this.height);
		if(!this.game.isMobile) {
			this.scale = Math.round(this.scale / .25) * .25;
		}
		this.scale = Math.min(this.scale,2);
		if(this.mainView != null && this.scale != 1) {
			this.mainView.style.transform = "scale(" + this.scale + "," + this.scale + ")";
		}
		this.inventory.resetPosition();
	}
	,message: function(msg,title,icon) {
		var _gthis = this;
		var modalDiv = this.document.createElement("div");
		modalDiv.style.position = "fixed";
		modalDiv.style.width = "100%";
		modalDiv.style.height = "100%";
		modalDiv.style.zIndex = "10003";
		var bgDiv = this.document.createElement("div");
		bgDiv.style.position = "fixed";
		bgDiv.style.width = "100%";
		bgDiv.style.height = "100%";
		bgDiv.style.backgroundColor = "black";
		bgDiv.style.opacity = "0.6";
		modalDiv.appendChild(bgDiv);
		var msgDiv = this.document.createElement("div");
		msgDiv.style.opacity = "1";
		msgDiv.style.backgroundColor = "#c0c0c0";
		msgDiv.style.zIndex = "10004";
		msgDiv.style.textAlign = "left";
		msgDiv.style.fontFamily = "\"MS Sans Serif\", sans-serif";
		msgDiv.style.fontSize = "8.25pt";
		msgDiv.style.borderStyle = "outset";
		msgDiv.style.borderColor = "#ffffff #808080 #808080 #ffffff";
		msgDiv.style.cursor = "default";
		msgDiv.style.position = "fixed";
		modalDiv.appendChild(msgDiv);
		var titleDiv = this.document.createElement("div");
		titleDiv.style.height = "10px";
		titleDiv.style.padding = "4px";
		titleDiv.style.marginBottom = "14px";
		titleDiv.style.backgroundColor = "#000080";
		titleDiv.style.fontWeight = "700";
		titleDiv.style.color = "white";
		titleDiv.style.textAlign = "left";
		titleDiv.appendChild(this.document.createTextNode(title != null ? title : "Vinnie's Tomb"));
		var closeImg = this.document.createElement("img");
		closeImg.src = "assets/art/" + vinnie_Assets.msgboxClose + ".gif";
		closeImg.style.position = "absolute";
		closeImg.style.top = "2px";
		titleDiv.appendChild(closeImg);
		msgDiv.appendChild(titleDiv);
		if(icon == null) {
			icon = vinnie_MessageIcon.Info;
		}
		if(icon != vinnie_MessageIcon.None) {
			var iconDiv = this.document.createElement("img");
			var tmp;
			if(icon == null) {
				tmp = "";
			} else {
				switch(icon._hx_index) {
				case 1:
					tmp = "assets/art/" + vinnie_Assets.info + ".gif";
					break;
				case 2:
					tmp = "assets/art/" + vinnie_Assets.caution + ".gif";
					break;
				default:
					tmp = "";
				}
			}
			iconDiv.src = tmp;
			iconDiv.style.display = "block";
			iconDiv.style.position = "absolute";
			iconDiv.style.left = "13px";
			iconDiv.style.top = "32px";
			msgDiv.appendChild(iconDiv);
		}
		var textDiv = this.document.createElement("div");
		textDiv.appendChild(this.document.createTextNode(msg));
		msgDiv.appendChild(textDiv);
		var okButton = this.document.createElement("button");
		okButton.style.display = "block";
		okButton.style.margin = "0 auto 13px auto";
		okButton.style.backgroundColor = "#c0c0c0";
		okButton.style.width = "75px";
		okButton.style.height = "23px";
		okButton.appendChild(this.document.createTextNode("OK"));
		msgDiv.appendChild(okButton);
		this.body.appendChild(modalDiv);
		var height = msgDiv.clientHeight;
		msgDiv.style.marginTop = "-" + height / 2 + "px";
		this.game.isPaused = true;
		okButton.focus();
		var width = 500.0;
		var textWidth = textDiv.clientWidth;
		if(textWidth > 0) {
			width = Math.min(500,textWidth);
		}
		if(icon != vinnie_MessageIcon.None) {
			textDiv.style.margin = "24px 13px 30px 62px";
			width += 76;
		} else {
			textDiv.style.margin = "24px 13px 30px 13px";
			width += 26;
		}
		msgDiv.style.width = "" + width + "px";
		msgDiv.style.margin = "0";
		msgDiv.style.position = "fixed";
		var msgX = (window.innerWidth - msgDiv.clientWidth) / 2;
		var msgY = (window.innerHeight - msgDiv.clientHeight) / 2;
		msgDiv.style.left = "" + msgX + "px";
		msgDiv.style.top = "" + msgY + "px";
		titleDiv.style.width = "" + (width - 8) + "px";
		closeImg.style.left = "" + (width - 19) + "px";
		titleDiv.onmousedown = function(e) {
			var ix = e.pageX;
			var iy = e.pageY;
			var stopDrag = function() {
				_gthis.document.onmouseleave = _gthis.document.onmousemove = _gthis.document.onmouseup = null;
			};
			_gthis.document.onmousemove = function(e) {
				msgX += e.pageX - ix;
				msgY += e.pageY - iy;
				msgDiv.style.left = "" + msgX + "px";
				msgDiv.style.top = "" + msgY + "px";
				ix = e.pageX;
				iy = e.pageY;
			};
			_gthis.document.onmouseup = stopDrag;
			_gthis.document.onmouseleave = stopDrag;
		};
		return new vinnie_MessageHandle(this.game,modalDiv,okButton);
	}
	,makeArt: function(art,x,y,onClick) {
		var img = this.document.createElement("img");
		img.src = "assets/art/" + art + ".gif";
		img.style.position = "absolute";
		img.style.left = "" + x + "px";
		img.style.top = "" + y + "px";
		if(onClick != null) {
			var f = this.makeHandler(onClick);
			img.onclick = function(e) {
				f();
			};
		}
		this.mainView.appendChild(img);
		return img;
	}
	,makeRect: function(x,y,width,height,color) {
		var div = this.document.createElement("div");
		div.style.position = "absolute";
		if(color != null) {
			div.style.backgroundColor = color;
		}
		div.style.left = "" + x + "px";
		div.style.top = "" + y + "px";
		div.style.width = "" + width + "px";
		div.style.height = "" + height + "px";
		this.mainView.appendChild(div);
		return div;
	}
	,makeVinnie: function(x,y) {
		var _gthis = this;
		this.vinnie = this.makeArt(vinnie_Assets.vinnie,x,y);
		this.vinnie.style.zIndex = "999";
		this.vinnie.onclick = function(e) {
			if(!_gthis.isDraggingVinnie && !_gthis.game.isPaused) {
				_gthis.onVinnieClicked();
				if(e != null) {
					e.stopPropagation();
				}
			}
		};
		if(this.game.shadesOn) {
			this.wearShades();
		}
		return this.vinnie;
	}
	,wearShades: function() {
		if(this.vinnie != null) {
			this.vinnie.src = "assets/art/" + vinnie_Assets.vinnieShades + ".gif";
		}
	}
	,makeItem: function(itemType,x,y,mustDrag,customHandler) {
		if(mustDrag == null) {
			mustDrag = true;
		}
		var _gthis = this;
		var itemInfo = vinnie_Inventory.itemInfo.get(itemType);
		if(itemInfo == null) {
			return null;
		}
		var item = null;
		var getItem = this.makeHandler(function() {
			if(!mustDrag || _gthis.isDraggingVinnie) {
				if(customHandler == null) {
					item.parentNode.removeChild(item);
					_gthis.obtainItem(itemType);
				} else {
					customHandler();
				}
			}
		});
		item = this.makeArt(itemInfo.icon,x,y,getItem);
		return item;
	}
	,makeClickHotspot: function(x,y,width,height,handler) {
		var hotspot = this.document.createElement("div");
		hotspot.style.position = "absolute";
		hotspot.style.left = "" + x + "px";
		hotspot.style.top = "" + y + "px";
		hotspot.style.width = "" + width + "px";
		hotspot.style.height = "" + height + "px";
		hotspot.onclick = this.makeHandler(handler);
		this.mainView.appendChild(hotspot);
		return hotspot;
	}
	,makeHoverHotspot: function(x,y,width,height,handler) {
		var hotspot = this.document.createElement("div");
		hotspot.style.position = "absolute";
		hotspot.style.left = "" + x + "px";
		hotspot.style.top = "" + y + "px";
		hotspot.style.width = "" + width + "px";
		hotspot.style.height = "" + height + "px";
		hotspot.onmouseover = this.makeHandler(handler);
		hotspot.ontouchmove = this.makeHandler(handler);
		this.mainView.appendChild(hotspot);
		return hotspot;
	}
	,makeDialogBox: function(x,y,width,height,textColor,bgColor) {
		var div = this.makeRect(x,y,width,height);
		div.style.fontFamily = "\"MS Sans Serif\", sans-serif";
		div.style.fontWeight = "700";
		div.style.fontSize = "8.25pt";
		if(textColor != null) {
			div.style.color = textColor;
		}
		if(bgColor != null) {
			div.style.background = bgColor;
		}
		div.style.cursor = "default";
		var text = this.document.createTextNode("");
		div.appendChild(text);
		return div;
	}
	,obtainItem: function(itemType) {
		var _gthis = this;
		var itemInfo = vinnie_Inventory.itemInfo.get(itemType);
		if(itemInfo != null) {
			this.audio.playSound(vinnie_Assets.getItem,true).then(function() {
				_gthis.inventory.addItem(itemType);
				_gthis.inventory.show();
				_gthis.message("You now have " + itemInfo.name,"Item collected!");
				_gthis.cancelDrag();
			});
		}
	}
	,onVinnieClicked: function() {
		if(this.isDraggingVinnie) {
			this.onVinnieEndDrag(null);
			return;
		}
		if(this.allowDragging) {
			this.isDraggingVinnie = true;
			this.document.onclick = $bind(this,this.onVinnieEndDrag);
			this.vinnie.style.display = "none";
			this.setCursor(this.game.shadesOn ? vinnie_Assets.vinnieShades : vinnie_Assets.vinnie);
			if(this.equippedItem != null) {
				this.equippedItem = null;
			}
		}
	}
	,onVinnieEndDrag: function(_) {
		if(this.allowEndDragging) {
			this.document.onclick = null;
			this.vinnie.style.display = "block";
			if(this.cursor != null) {
				this.vinnie.style.top = this.cursor.style.top;
				this.vinnie.style.left = this.cursor.style.left;
			}
			this.setCursor(null);
			this.isDraggingVinnie = false;
		}
	}
	,cancelDrag: function() {
		if(this.isDraggingVinnie) {
			this.setCursor(null);
			this.document.onclick = null;
			this.vinnie.style.display = "block";
			this.isDraggingVinnie = false;
		}
	}
	,makeHandler: function(f) {
		var _gthis = this;
		return function() {
			if(!_gthis.game.isPaused) {
				f();
			}
		};
	}
	,nextScene: function(nextScene,passCode,msg) {
		var _gthis = this;
		this.audio.playSound(vinnie_Assets.completeScene,true).then(function() {
			var handle = _gthis.message(msg == null ? "You have completed " + _gthis.title : msg);
			var showPasscode = false;
			if(passCode != null) {
				var gameData = vinnie_MainMenu.PASSCODE_GAMES.h[passCode];
				if(gameData != null) {
					showPasscode = _gthis.game.shadesOn == gameData.shades;
					var _g = 0;
					var _g1 = gameData.inventory;
					while(_g < _g1.length) {
						var item = _g1[_g];
						++_g;
						if(!_gthis.inventory.hasItem(item)) {
							showPasscode = false;
							break;
						}
					}
				}
			}
			var gotoNextScene = function() {
				var scene = Type.createInstance(nextScene,[_gthis.game]);
				_gthis.game.startScene(scene);
			};
			if(showPasscode) {
				handle.then(function() {
					_gthis.message("" + passCode,"Remember This Pass Code").then(gotoNextScene);
				});
			} else {
				handle.then(gotoNextScene);
			}
		});
	}
	,transitionToNextScene: function(nextScene,transition) {
		var _gthis = this;
		this.mainView.style.display = "none";
		this.audio.stopMusic();
		transition(function() {
			var scene = Type.createInstance(nextScene,[_gthis.game]);
			_gthis.game.startScene(scene);
		});
	}
	,bonusScene: function(id) {
		var _gthis = this;
		if(this.game.bonusScenes && !this.game.bonusSceneCompleted[id]) {
			this.message("YOU HAVE FOUND A HIDDEN BONUS SCENE").then(function() {
				_gthis.game.startScene(new vinnie_ActionScene(_gthis.game,js_Boot.getClass(_gthis),id));
			});
		}
	}
	,vinnieDied: function() {
		var _gthis = this;
		this.game.isPaused = true;
		this.allowDragging = false;
		this.audio.playSound(vinnie_Assets.death);
		if(this.vinnie != null) {
			this.vinnie.onclick = function(_) {
				_gthis.exitGame();
			};
		}
	}
	,exitGame: function() {
		if(window.top != null) {
			window.top.location.href = "http://www.reldni.com";
		} else {
			this.document.location.href = "http://www.reldni.com";
		}
	}
	,isEquipped: function(itemType) {
		if(this.equippedItem != null) {
			return this.equippedItem.type == itemType;
		} else {
			return false;
		}
	}
	,equipItem: function(item) {
		if(!this.isDraggingVinnie) {
			if(item != null) {
				this.equippedItem = item;
				this.setCursor(this.equippedItem.icon);
				this.cursor.style.top = "-1000px";
			} else {
				this.equippedItem = null;
				this.setCursor(null);
			}
		}
	}
	,setCursor: function(art) {
		if(this.cursor != null && this.cursor.parentNode != null) {
			this.cursor.parentNode.removeChild(this.cursor);
			this.cursor = null;
		}
		if(this.mainView != null) {
			if(art != null) {
				this.mainView.style.cursor = "none";
				this.cursor = this.makeArt(art,0,0);
				this.cursor.style.zIndex = "9999";
				var viewRect = this.mainView.getBoundingClientRect();
				var x = (this.mouseX - viewRect.left) / this.scale - 16;
				var y = (this.mouseY - viewRect.top) / this.scale - 16;
				this.cursor.style.left = "" + x + "px";
				this.cursor.style.top = "" + y + "px";
				this.cursor.style.setProperty("pointer-events","none");
			} else {
				this.mainView.style.cursor = "auto";
			}
		}
	}
	,onMouseMove: function(e) {
		if(e.currentTarget == this.mainView) {
			this.mouseX = e.clientX;
			this.mouseY = e.clientY;
			var viewRect = this.mainView.getBoundingClientRect();
			if(this.cursor != null) {
				var x = (this.mouseX - viewRect.left) / this.scale - 16;
				var y = (this.mouseY - viewRect.top) / this.scale - 16;
				this.cursor.style.left = "" + x + "px";
				this.cursor.style.top = "" + y + "px";
			}
		}
	}
	,onTouchStart: function(e) {
		if(!this.game.isPaused && e.currentTarget == this.mainView) {
			this.mouseX = e.touches[0].clientX;
			this.mouseY = e.touches[0].clientY;
			this.touchStartElement = e.touches[0].target;
			var viewRect = this.mainView.getBoundingClientRect();
			if(this.vinnie != null && !this.isDraggingVinnie) {
				var x = (e.touches[0].clientX - viewRect.left) / this.scale;
				var y = (e.touches[0].clientY - viewRect.top) / this.scale;
				var dx = x - (this.vinnie.offsetLeft + 16);
				var dy = y - (this.vinnie.offsetTop + 16);
				var dist = Math.sqrt(dx * dx + dy * dy);
				if(dist <= 40) {
					this.onVinnieClicked();
					e.stopPropagation();
					return false;
				}
			}
		}
		return true;
	}
	,onTouchMove: function(e) {
		if(e.currentTarget == this.body) {
			var dx = e.touches[0].clientX - this.mouseX;
			this.mouseX = e.touches[0].clientX;
			this.mouseY = e.touches[0].clientY;
			var viewRect = this.mainView.getBoundingClientRect();
			var x = (this.mouseX - viewRect.left) / this.scale;
			var y = (this.mouseY - viewRect.top) / this.scale;
			if(x < 0 || x > this.width || y < 0 || y > this.height) {
				return true;
			}
			if(this.cursor != null) {
				this.cursor.style.left = "" + (x - 16) + "px";
				this.cursor.style.top = "" + (y - 16) + "px";
			}
			if(!this.game.isPaused) {
				if(!this.isDraggingVinnie && this.equippedItem == null && this.dialogScroller != null) {
					this.dialogGotoLine(dx < 0 ? this.curDialogLine + 1 : this.curDialogLine - 1);
				}
				var obj = this.document.elementFromPoint(e.touches[0].pageX,e.touches[0].pageY);
				if(obj != null && obj.onmouseover != null) {
					obj.onmouseover(null);
				}
			}
		}
		return true;
	}
	,onTouchEnd: function(e) {
		if(e.touches.length == 0) {
			if(!this.game.isPaused) {
				var obj = this.document.elementFromPoint(e.changedTouches[0].pageX,e.changedTouches[0].pageY);
				if(obj != null && obj.onclick != null && !obj.disabled && obj != this.touchStartElement) {
					obj.onclick(null);
				}
			}
			if(this.isDraggingVinnie) {
				this.vinnie.style.display = "block";
				this.onVinnieEndDrag(null);
			}
			this.touchStartElement = null;
			return false;
		}
		return true;
	}
	,dialog: function(lines) {
		var scrollContainer = this.document.createElement("div");
		scrollContainer.style.position = "absolute";
		scrollContainer.style.width = "" + this.width + "px";
		scrollContainer.style.height = "16px";
		scrollContainer.style.bottom = "0";
		scrollContainer.style.left = "0";
		scrollContainer.style.zIndex = "9000";
		this.mainView.appendChild(scrollContainer);
		var scrollBar = this.document.createElement("div");
		scrollBar.style.width = "" + this.width + "px";
		scrollBar.style.overflowX = "scroll";
		scrollBar.style.overflowY = "hidden";
		scrollBar.style.position = "absolute";
		scrollBar.style.zIndex = "9000";
		scrollContainer.appendChild(scrollBar);
		this.dialogScroller = scrollBar;
		var innerDiv = this.document.createElement("div");
		innerDiv.style.width = "" + this.width * 10 + "px";
		innerDiv.style.height = "1px";
		scrollBar.appendChild(innerDiv);
		this.dialogLines = lines;
		this.curDialogLine = 0;
		this.curDialogScroll = this.dialogScroller.scrollLeft;
		this.dialogScroller.scrollLeft = 0;
		if(this.dialogLines != null && this.dialogLines.length > 0) {
			this.dialogLines[0]();
		}
		var options = { passive : false};
		this.dialogScroller.addEventListener("scroll",$bind(this,this.onDialogScroll),options);
		return scrollContainer;
	}
	,onDialogScroll: function(e) {
		if(e.currentTarget == this.dialogScroller && !this.game.isPaused && this.dialogScroller.scrollLeft != this.curDialogScroll) {
			var line = this.curDialogLine + (this.dialogScroller.scrollLeft > this.curDialogScroll ? 1 : -1);
			this.dialogScroller.scrollLeft = this.curDialogScroll;
			this.dialogGotoLine(line);
		}
		e.preventDefault();
		return false;
	}
	,dialogGotoLine: function(line) {
		if(this.isDialogScrolling) {
			this.dialogScroller.scrollLeft = this.curDialogScroll;
			if(this.scrollTimer != null) {
				this.scrollTimer.stop();
			}
			this.scrollTimer = new haxe_Timer(150);
			this.scrollTimer.run = $bind(this,this.onScrollStopped);
			return;
		}
		if(this.dialogLines == null || this.dialogLines.length <= 1) {
			return;
		}
		if(line < 0) {
			line = 0;
		}
		if(line >= this.dialogLines.length) {
			line = this.dialogLines.length - 1;
		}
		if(this.curDialogLine != line) {
			this.curDialogLine = line;
			var dialogLine = this.dialogLines[this.curDialogLine];
			if(dialogLine != null) {
				dialogLine();
			}
			var maxScroll = this.dialogScroller.scrollWidth - this.dialogScroller.clientWidth;
			this.curDialogScroll = this.curDialogLine * maxScroll / (this.dialogLines.length - 1) | 0;
			this.dialogScroller.scrollLeft = this.curDialogScroll;
		}
		this.isDialogScrolling = true;
		this.scrollTimer = new haxe_Timer(150);
		this.scrollTimer.run = $bind(this,this.onScrollStopped);
	}
	,onScrollStopped: function() {
		this.isDialogScrolling = false;
		this.scrollTimer.stop();
		this.scrollTimer = null;
	}
	,animate: function(elem,time,properties,onComplete) {
		var _gthis = this;
		var gotTime = false;
		var curTime = 0.0;
		var startTime = 0.0;
		var propDeltas = [];
		var propName = haxe_ds_StringMap.keysIterator(properties.h);
		while(propName.hasNext()) {
			var propName1 = propName.next();
			var value = Std.parseInt(elem.style.getPropertyValue(propName1));
			if(value != null) {
				var to = properties.h[propName1];
				var speed = (to - value) / time;
				propDeltas.push({ name : propName1, val : value, speed : speed, to : to});
			}
		}
		time *= 1000;
		var animator = null;
		animator = function(t) {
			if(!gotTime) {
				curTime = t;
				startTime = t;
				gotTime = true;
			}
			var dt = (t - curTime) / 1000;
			curTime = t;
			var _g = 0;
			while(_g < propDeltas.length) {
				var prop = propDeltas[_g];
				++_g;
				prop.val += prop.speed * dt;
				elem.style.setProperty(prop.name,"" + prop.val + "px");
			}
			if(curTime - startTime < time) {
				window.requestAnimationFrame(animator);
			} else {
				var _g = 0;
				while(_g < propDeltas.length) {
					var prop = propDeltas[_g];
					++_g;
					prop.val += prop.speed * dt;
					elem.style.setProperty(prop.name,"" + prop.to + "px");
				}
				_gthis.game.isPaused = false;
				if(onComplete != null) {
					onComplete();
				}
			}
		};
		this.game.isPaused = true;
		window.requestAnimationFrame(animator);
	}
	,getViewRect: function() {
		if(this.mainView != null) {
			return this.mainView.getBoundingClientRect();
		} else {
			return this.body.getBoundingClientRect();
		}
	}
	,__class__: vinnie_Scene
};
var vinnie_ActionScene = function(game,previousScene,sceneId) {
	vinnie_Scene.call(this,game);
	this.title = "Walk Slowly and Past The Hidden Death Traps";
	this.allowDragging = false;
	this.width = 446;
	this.height = 341;
	this.previousScene = previousScene;
	game.bonusSceneCompleted[sceneId] = true;
	this.traps = vinnie_ActionScene.ACTION_SCENE_DATA[sceneId];
};
$hxClasses["vinnie.ActionScene"] = vinnie_ActionScene;
vinnie_ActionScene.__name__ = "vinnie.ActionScene";
vinnie_ActionScene.__super__ = vinnie_Scene;
vinnie_ActionScene.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.message("IN THIS BONUS SCENE, USE THE ARROW KEYS TO MOVE VINNIE TO THE TOP","Vinnie's Tomb Bonus Scene").then(function() {
			_gthis.makeArt(vinnie_Assets.bgAction,0,0);
			_gthis.vinnieX = 200;
			_gthis.vinnieY = 305;
			_gthis.makeVinnie(_gthis.vinnieX,_gthis.vinnieY);
			window.addEventListener("keydown",$bind(_gthis,_gthis.onKeyPress));
		});
	}
	,end: function() {
		window.removeEventListener("keydown",$bind(this,this.onKeyPress));
		vinnie_Scene.prototype.end.call(this);
	}
	,onKeyPress: function(e) {
		if(!this.game.isPaused) {
			var dx = 0;
			var dy = 0;
			if(e.keyCode == 38) {
				dy = -3;
			}
			if(e.keyCode == 40) {
				dy = 3;
			}
			if(e.keyCode == 37) {
				dx = -5;
			}
			if(e.keyCode == 39) {
				dx = 5;
			}
			this.vinnieX += dx;
			this.vinnieY += dy;
			var val = this.vinnieX;
			var max = this.width - 32;
			this.vinnieX = val < 0 ? 0 : val > max ? max : val;
			var val = this.vinnieY;
			var max = this.height - 32;
			this.vinnieY = val < 0 ? 0 : val > max ? max : val;
			this.vinnie.style.left = "" + this.vinnieX + "px";
			this.vinnie.style.top = "" + this.vinnieY + "px";
			if(this.traps != null) {
				var _g = 0;
				var _g1 = this.traps;
				while(_g < _g1.length) {
					var trap = _g1[_g];
					++_g;
					if(this.vinnieX >= trap.x && this.vinnieX <= trap.x + 49 && this.vinnieY >= trap.y && this.vinnieY <= trap.y + 33) {
						this.onDeathTrap();
						return false;
					}
				}
			}
			if(this.vinnieY <= 0) {
				this.onWin();
			}
		}
		e.stopPropagation();
		return false;
	}
	,onDeathTrap: function() {
		var _gthis = this;
		window.removeEventListener("keydown",$bind(this,this.onKeyPress));
		this.audio.playSound(vinnie_Assets.death,false);
		this.vinnie.style.display = "none";
		this.message("You have stepped on a hidden Death Trap.  You must try again.").then(function() {
			_gthis.game.startScene(_gthis);
		});
	}
	,onWin: function() {
		this.nextScene(this.previousScene,null,"You have successfully traversed the field of death traps!");
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadArt(vinnie_Assets.bgAction);
		this.game.preloader.preloadSound(vinnie_Assets.death);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerSound(vinnie_Assets.death);
	}
	,__class__: vinnie_ActionScene
});
var vinnie_Assets = function() { };
$hxClasses["vinnie.Assets"] = vinnie_Assets;
vinnie_Assets.__name__ = "vinnie.Assets";
var vinnie_AudioManager = function(game) {
	this.game = game;
	this.audios = new haxe_ds_StringMap();
	this.audiosToPrime = [];
	window.onpagehide = $bind(this,this.onFocusChanged);
	window.onpageshow = $bind(this,this.onFocusChanged);
	window.document.addEventListener("visibilitychange",$bind(this,this.onFocusChanged));
	var _g = [];
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	_g.push(new Audio());
	this.audioPool = _g;
	this.audiosToPrime = this.audioPool.slice();
};
$hxClasses["vinnie.AudioManager"] = vinnie_AudioManager;
vinnie_AudioManager.__name__ = "vinnie.AudioManager";
vinnie_AudioManager.prototype = {
	registerSound: function(sound) {
		if(!Object.prototype.hasOwnProperty.call(this.audios.h,sound)) {
			var dst = this.audioPool.pop();
			if(dst != null) {
				dst.src = "assets/sounds/" + sound;
				dst.autoplay = false;
				dst.load();
				dst.play();
				dst.pause();
				this.audios.h[sound] = dst;
			}
		}
	}
	,registerMusic: function(sound) {
		if(!Object.prototype.hasOwnProperty.call(this.audios.h,sound)) {
			var dst = this.audioPool.pop();
			if(dst != null) {
				dst.src = "assets/music/" + sound + ".mp3";
				dst.autoplay = false;
				dst.load();
				this.audios.h[sound] = dst;
			}
		}
	}
	,playSound: function(sound,pause) {
		if(pause == null) {
			pause = false;
		}
		var _gthis = this;
		this.stopSound();
		var audio = this.audios.h[sound];
		if(audio == null) {
			audio = new Audio();
			audio.src = "assets/sounds/" + sound;
		}
		try {
			audio.currentTime = 0;
		} catch( _g ) {
		}
		audio.volume = 1.0;
		audio.loop = false;
		audio.play();
		var handle = new vinnie__$AudioManager_AudioHandle(audio);
		this.curSound = handle;
		if(pause) {
			this.game.isPaused = true;
			handle.then(function() {
				_gthis.game.isPaused = false;
			});
		}
		return handle;
	}
	,playMusic: function(music) {
		this.stopMusic();
		var audio = this.audios.h[music];
		if(audio == null) {
			audio = new Audio();
			audio.src = "assets/music/" + music + ".mp3";
		}
		audio.loop = true;
		audio.volume = 1.0;
		try {
			audio.currentTime = 0;
		} catch( _g ) {
		}
		audio.play();
		this.curMusic = new vinnie__$AudioManager_AudioHandle(audio);
	}
	,stopSound: function() {
		if(this.curSound != null) {
			this.curSound.stop();
		}
		this.curSound = null;
	}
	,stopMusic: function() {
		if(this.curMusic != null) {
			this.curMusic.stop();
			this.curMusic = null;
		}
	}
	,unregisterAll: function() {
		var audio = haxe_ds_StringMap.valueIterator(this.audios.h);
		while(audio.hasNext()) {
			var audio1 = audio.next();
			if(audio1 != null) {
				if(audio1.loop) {
					audio1.pause();
				}
				this.audioPool.push(audio1);
			}
		}
		this.audios = new haxe_ds_StringMap();
	}
	,onFocusChanged: function(_) {
		if(this.curMusic != null) {
			if(window.document.hidden) {
				this.curMusic.pause();
			} else {
				this.curMusic.resume();
			}
		}
	}
	,primeSounds: function() {
		var _g = 0;
		var _g1 = this.audiosToPrime;
		while(_g < _g1.length) {
			var audio = _g1[_g];
			++_g;
			audio.volume = 0.0;
			audio.play();
			audio.pause();
		}
		if(this.audiosToPrime.length > 0) {
			this.audiosToPrime.splice(0,this.audiosToPrime.length);
		}
	}
	,__class__: vinnie_AudioManager
};
var vinnie__$AudioManager_AudioHandle = function(audio) {
	var _gthis = this;
	this.audio = audio;
	this.onComplete = function() {
		audio.onended = null;
	};
	audio.onended = audio.onerror = function(_) {
		_gthis.onComplete();
	};
	if(audio.error != null) {
		haxe_Timer.delay(function() {
			_gthis.onComplete();
		},1);
	}
};
$hxClasses["vinnie._AudioManager.AudioHandle"] = vinnie__$AudioManager_AudioHandle;
vinnie__$AudioManager_AudioHandle.__name__ = "vinnie._AudioManager.AudioHandle";
vinnie__$AudioManager_AudioHandle.prototype = {
	then: function(f) {
		var oldOnComplete = this.onComplete;
		this.onComplete = function() {
			oldOnComplete();
			f();
		};
		return this;
	}
	,stop: function() {
		this.audio.pause();
	}
	,pause: function() {
		this.audio.pause();
	}
	,resume: function() {
		this.audio.play();
	}
	,__class__: vinnie__$AudioManager_AudioHandle
};
var vinnie_InventoryItemType = $hxEnums["vinnie.InventoryItemType"] = { __ename__ : true, __constructs__ : ["Magnet","Sword","SkullThatOozesBloodIntermittently","Diamond","Banana","Key","Underwear","CD","Money","EightBall","Cheese","Shades","ToolBox"]
	,Magnet: {_hx_index:0,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,Sword: {_hx_index:1,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,SkullThatOozesBloodIntermittently: {_hx_index:2,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,Diamond: {_hx_index:3,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,Banana: {_hx_index:4,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,Key: {_hx_index:5,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,Underwear: {_hx_index:6,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,CD: {_hx_index:7,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,Money: {_hx_index:8,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,EightBall: {_hx_index:9,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,Cheese: {_hx_index:10,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,Shades: {_hx_index:11,__enum__:"vinnie.InventoryItemType",toString:$estr}
	,ToolBox: {_hx_index:12,__enum__:"vinnie.InventoryItemType",toString:$estr}
};
var vinnie_Inventory = function(game) {
	this.game = game;
	this.inventoryView = window.document.createElement("div");
	this.inventoryView.style.position = "absolute";
	this.inventoryView.style.top = "50%";
	this.inventoryView.style.left = "50%";
	this.inventoryView.style.display = "none";
	this.inventoryView.style.background = "#ffe0c0";
	this.inventoryView.style.zIndex = "10001";
	var w = 270;
	var h = 120;
	this.inventoryView.style.width = "" + w + "px";
	this.inventoryView.style.height = "" + h + "px";
	this.inventoryView.style.marginLeft = "-" + w / 2 + "px";
	this.inventoryView.style.border = "1px solid black";
	this.inventoryView.style.overflow = "hidden";
	window.document.body.appendChild(this.inventoryView);
	var titleBar = window.document.createElement("div");
	titleBar.style.background = "#000080";
	titleBar.style.color = "white";
	titleBar.style.fontSize = "8.5pt";
	titleBar.style.width = "100%";
	titleBar.style.padding = "4px 2px";
	titleBar.style.fontFamily = "\"MS Sans Serif\",sans-serif";
	titleBar.style.fontWeight = "bold";
	titleBar.style.cursor = "default";
	titleBar.appendChild(window.document.createTextNode("Item Inventory"));
	titleBar.onclick = $bind(this,this.onTitleBarClicked);
	this.inventoryView.appendChild(titleBar);
	this.useCollapse = false;
	this.isCollapsed = false;
	this.items = new haxe_ds_EnumValueMap();
};
$hxClasses["vinnie.Inventory"] = vinnie_Inventory;
vinnie_Inventory.__name__ = "vinnie.Inventory";
vinnie_Inventory.prototype = {
	show: function() {
		this.inventoryView.style.display = "block";
		this.resetPosition();
	}
	,hide: function() {
		this.inventoryView.style.display = "none";
	}
	,hasItem: function(item) {
		return this.items.exists(item);
	}
	,addItem: function(item) {
		var _gthis = this;
		var itemInfo = vinnie_Inventory.itemInfo.get(item);
		if(itemInfo != null) {
			var itemPic = window.document.createElement("img");
			itemPic.src = "assets/art/" + itemInfo.icon + ".gif";
			itemPic.style.position = "absolute";
			itemPic.style.left = "" + (itemInfo.x + 2) + "px";
			itemPic.style.top = "" + (itemInfo.y + 16) + "px";
			var _g = $bind(this,this.onEquipItem);
			var item1 = itemInfo;
			itemPic.onclick = function() {
				_g(item1);
			};
			itemPic.addEventListener("touchstart",function(_) {
				var _g = $bind(_gthis,_gthis.onEquipItem);
				var item = itemInfo;
				(function() {
					_g(item);
				})();
			});
			this.inventoryView.appendChild(itemPic);
			this.items.set(item,itemPic);
		}
	}
	,resetPosition: function() {
		if(this.game.scene != null) {
			var viewRect = this.game.scene.getViewRect();
			var height = 120;
			var yPos = viewRect.top - height - 4;
			if(yPos < 0) {
				yPos = 0;
				this.useCollapse = true;
				this.isCollapsed = true;
				height = 20;
			} else {
				this.useCollapse = false;
				this.isCollapsed = false;
			}
			this.inventoryView.style.top = "" + yPos + "px";
			this.inventoryView.style.height = "" + height + "px";
		}
	}
	,removeItem: function(item) {
		var itemPic = this.items.get(item);
		if(itemPic != null && itemPic.parentNode != null) {
			itemPic.parentNode.removeChild(itemPic);
		}
		this.items.remove(item);
	}
	,removeAllItems: function() {
		var itemPic = this.items.iterator();
		while(itemPic.hasNext()) {
			var itemPic1 = itemPic.next();
			if(itemPic1 != null && itemPic1.parentNode != null) {
				itemPic1.parentNode.removeChild(itemPic1);
			}
		}
		this.items = new haxe_ds_EnumValueMap();
	}
	,onEquipItem: function(item) {
		var _gthis = this;
		if(this.game.scene == null) {
			return;
		}
		if(item.type == vinnie_InventoryItemType.ToolBox) {
			if(!this.hasItem(vinnie_InventoryItemType.EightBall)) {
				this.game.scene.message("You find an eight ball inside the metal box.").then(function() {
					_gthis.addItem(vinnie_InventoryItemType.EightBall);
				});
			} else {
				this.game.scene.message("The Metal Box is empty.");
			}
		} else if(item.type == vinnie_InventoryItemType.EightBall && js_Boot.getClass(this.game.scene) != vinnie_Scene13) {
			this.game.scene.message("You do not need the eight ball in this scene");
		} else if(item.type == vinnie_InventoryItemType.CD && js_Boot.getClass(this.game.scene) != vinnie_Scene17) {
			this.game.scene.message("You do not have a CD player to play the disc");
		} else if(item.type == vinnie_InventoryItemType.Shades) {
			this.game.shadesOn = true;
			this.removeItem(vinnie_InventoryItemType.Shades);
			this.game.scene.message("You put on the cool shades.").then(function() {
				_gthis.game.scene.wearShades();
			});
		} else {
			this.game.scene.equipItem(item);
		}
		this.onCollapseInventory(null);
	}
	,preloadItems: function() {
		var item = vinnie_Inventory.itemInfo.iterator();
		while(item.hasNext()) {
			var item1 = item.next();
			this.game.preloader.preloadArt(item1.icon);
		}
	}
	,onTitleBarClicked: function(_) {
		if(this.useCollapse) {
			this.inventoryView.addEventListener("mouseleave",$bind(this,this.onCollapseInventory));
			this.inventoryView.style.height = "120px";
			this.isCollapsed = true;
		}
	}
	,onCollapseInventory: function(_) {
		this.inventoryView.removeEventListener("mouseleave",$bind(this,this.onCollapseInventory));
		if(this.useCollapse) {
			this.inventoryView.style.height = "20px";
			this.isCollapsed = false;
		}
	}
	,__class__: vinnie_Inventory
};
var vinnie_Scene3 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 398;
	this.height = 199;
	this.title = "Scene Three";
};
$hxClasses["vinnie.Scene3"] = vinnie_Scene3;
vinnie_Scene3.__name__ = "vinnie.Scene3";
vinnie_Scene3.__super__ = vinnie_Scene;
vinnie_Scene3.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.audio.playMusic(vinnie_Assets.musicScene3);
		this.makeArt(vinnie_Assets.bgScene3,0,0);
		var _g = $bind(this,this.bonusScene);
		var id = 0;
		this.makeClickHotspot(66,150,57,45,function() {
			_g(id);
		});
		this.makeClickHotspot(304,146,35,37,function() {
			_gthis.message("CAUTION - This game will rot your brain");
		});
		this.makeClickHotspot(152,136,73,57,$bind(this,this.onHoleClicked));
		this.makeHoverHotspot(0,40,73,49,$bind(this,this.onFried));
		this.makeVinnie(352,88);
		this.inventory.show();
	}
	,onHoleClicked: function() {
		var _gthis = this;
		this.audio.playSound(vinnie_Assets.teleport);
		this.message("You have entered the underworld and completed Scene Three").then(function() {
			_gthis.transitionToNextScene(vinnie_Scene4,$bind(_gthis,_gthis.underworldTransition));
		});
	}
	,underworldTransition: function(handler) {
		this.audio.playSound(vinnie_Assets.nar1);
		this.message("You gently ride down on a cushion of air to the underworld.  You do not have to wander far until you reach two party-bots.  These stationary robots had been fused together to guard and protect.  They were programmed to throw pies at anyone entering the underworld during the war with the drunken eyed sailors of moldville.  The war has been over for years and Underworld has become a wealthy metropolis.  Inside the underworld city lies many lucrative franchises and taco stands.  You know that your journey most likely lies around the outskirts of the Underworld city.  Therefore, you will not have an opportunity to sample the fine dining establishments.","You enter the underworld...").then(handler);
	}
	,onFried: function() {
		var _gthis = this;
		if(this.isDraggingVinnie) {
			this.game.unlockMedal(48591);
			this.message("You climb to the top of the tree.  A freak bolt of lightning kills you!","OH NO!",vinnie_MessageIcon.Caution).then(function() {
				_gthis.cancelDrag();
				_gthis.vinnie.src = "assets/art/" + vinnie_Assets.vinnieFried + ".gif";
				_gthis.vinnie.style.left = "8px";
				_gthis.vinnie.style.top = "32px";
				_gthis.makeArt(vinnie_Assets.bolt,24,8);
				_gthis.vinnieDied();
			});
		}
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene3);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene3);
		this.game.preloader.preloadSound(vinnie_Assets.teleport);
		this.game.preloader.preloadSound(vinnie_Assets.nar1);
		this.game.preloader.preloadArt(vinnie_Assets.vinnieFried);
		this.game.preloader.preloadArt(vinnie_Assets.bolt);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene3);
		this.audio.registerSound(vinnie_Assets.teleport);
		this.audio.registerSound(vinnie_Assets.nar1);
	}
	,__class__: vinnie_Scene3
});
var vinnie_Scene8 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 400;
	this.height = 218;
	this.title = "Scene Eight";
};
$hxClasses["vinnie.Scene8"] = vinnie_Scene8;
vinnie_Scene8.__name__ = "vinnie.Scene8";
vinnie_Scene8.__super__ = vinnie_Scene;
vinnie_Scene8.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.allowDragging = false;
		this.audio.playMusic(vinnie_Assets.musicScene8);
		this.makeArt(vinnie_Assets.bgScene8,0,0);
		this.makeHoverHotspot(-1,21,401,107,$bind(this,this.cancelDrag));
		this.line2 = this.makeArt(vinnie_Assets.scene8Line2,274,123);
		this.vinnieDialog = this.makeDialogBox(209,67,171,56,"black","white");
		this.vinnieDialog.style.fontFamily = "\"Times New Roman\",serif";
		this.vinnieDialog.style.fontSize = "9.75pt";
		this.vinnieDialog.style.fontWeight = "400";
		this.exit = this.makeArt(vinnie_Assets.exitLeft,8,160,$bind(this,this.onExitClicked));
		this.exit.style.display = "none";
		this.makeVinnie(349,162);
		this.guysDialog = this.makeDialogBox(12,49,191,56,"black","white");
		this.guysDialog.style.fontFamily = "\"Times New Roman\",serif";
		this.guysDialog.style.fontSize = "9.75pt";
		this.guysDialog.style.fontWeight = "normal";
		this.line1 = this.makeArt(vinnie_Assets.scene8Line1,69,105);
		this.makeItem(vinnie_InventoryItemType.ToolBox,296,170);
		this.makeArt(vinnie_Assets.funlander,176,164);
		this.makeArt(vinnie_Assets.funlander,138,163);
		this.makeArt(vinnie_Assets.funlander,106,165);
		this.makeArt(vinnie_Assets.funlander,75,164);
		this.makeArt(vinnie_Assets.ufo,322,-8,function() {
			_gthis.message("The alien space ship is suspended high in the sky above Fun Land.");
		});
		var vinnieSpeak = function(sound,dialog) {
			_gthis.vinnieDialog.style.display = "block";
			_gthis.vinnieDialog.textContent = dialog;
			_gthis.guysDialog.style.display = "none";
			_gthis.line1.style.display = "none";
			_gthis.line2.style.display = "block";
			_gthis.audio.playSound(sound,false);
		};
		var guysSpeak = function(sound,dialog) {
			_gthis.vinnieDialog.style.display = "none";
			_gthis.guysDialog.style.display = "block";
			_gthis.guysDialog.textContent = dialog;
			_gthis.line1.style.display = "block";
			_gthis.line2.style.display = "none";
			_gthis.audio.playSound(sound,false);
		};
		var sound = vinnie_Assets.vin11;
		var dialog = "Why do you guys look so sad?  I thought this place was Fun Land.";
		var tmp = function() {
			vinnieSpeak(sound,dialog);
		};
		var sound1 = vinnie_Assets.guy1;
		var dialog1 = "That is the cruel irony.";
		var tmp1 = function() {
			guysSpeak(sound1,dialog1);
		};
		var sound2 = vinnie_Assets.vin12;
		var dialog2 = "Why are you so sad?";
		var tmp2 = function() {
			vinnieSpeak(sound2,dialog2);
		};
		var sound3 = vinnie_Assets.guy2;
		var dialog3 = "We just found out that Donny Osmond canceled his gig here.  That’s only part of it though.";
		var tmp3 = function() {
			guysSpeak(sound3,dialog3);
		};
		var sound4 = vinnie_Assets.vin13;
		var dialog4 = "Tell me more.";
		var tmp4 = function() {
			vinnieSpeak(sound4,dialog4);
		};
		var sound5 = vinnie_Assets.guy3;
		var dialog5 = "There is a monster that terrorizes us through the night.";
		var tmp5 = function() {
			guysSpeak(sound5,dialog5);
		};
		var sound6 = vinnie_Assets.vin14;
		var dialog6 = "That’s terrible!  Does he try and eat you?";
		var tmp6 = function() {
			vinnieSpeak(sound6,dialog6);
		};
		var sound7 = vinnie_Assets.guy4;
		var dialog7 = "No.  He tells horrible one liners and sings show tunes.";
		var tmp7 = function() {
			guysSpeak(sound7,dialog7);
		};
		var sound8 = vinnie_Assets.vin15;
		var dialog8 = "That doesn’t seem too bad.";
		var tmp8 = function() {
			vinnieSpeak(sound8,dialog8);
		};
		var sound9 = vinnie_Assets.guy5;
		var dialog9 = "He sounds like Leonard Cohen and he sings at three o’clock in the morning.";
		var tmp9 = function() {
			guysSpeak(sound9,dialog9);
		};
		var sound10 = vinnie_Assets.vin16;
		var dialog10 = "That is bad.";
		this.dialog([tmp,tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7,tmp8,tmp9,function() {
			vinnieSpeak(sound10,dialog10);
		},function() {
			_gthis.exit.style.display = "block";
			_gthis.vinnieDialog.style.display = "none";
			_gthis.guysDialog.style.display = "none";
			_gthis.line1.style.display = "none";
			_gthis.line2.style.display = "none";
			_gthis.allowDragging = true;
			_gthis.message("You would like to ask the sad guys about Vinnie’s Tomb, but they appear too upset to answer any questions.");
		}]);
	}
	,onExitClicked: function() {
		this.nextScene(vinnie_Scene9);
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene8);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene8);
		this.game.preloader.preloadArt(vinnie_Assets.scene8Line2);
		this.game.preloader.preloadArt(vinnie_Assets.exitLeft);
		this.game.preloader.preloadArt(vinnie_Assets.scene8Line1);
		this.game.preloader.preloadArt(vinnie_Assets.funlander);
		this.game.preloader.preloadArt(vinnie_Assets.funlander);
		this.game.preloader.preloadArt(vinnie_Assets.funlander);
		this.game.preloader.preloadArt(vinnie_Assets.funlander);
		this.game.preloader.preloadArt(vinnie_Assets.ufo);
		this.game.preloader.preloadSound(vinnie_Assets.vin11);
		this.game.preloader.preloadSound(vinnie_Assets.guy1);
		this.game.preloader.preloadSound(vinnie_Assets.vin12);
		this.game.preloader.preloadSound(vinnie_Assets.guy2);
		this.game.preloader.preloadSound(vinnie_Assets.vin13);
		this.game.preloader.preloadSound(vinnie_Assets.guy3);
		this.game.preloader.preloadSound(vinnie_Assets.vin14);
		this.game.preloader.preloadSound(vinnie_Assets.guy4);
		this.game.preloader.preloadSound(vinnie_Assets.vin15);
		this.game.preloader.preloadSound(vinnie_Assets.guy5);
		this.game.preloader.preloadSound(vinnie_Assets.vin16);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene8);
		this.audio.registerSound(vinnie_Assets.vin11);
		this.audio.registerSound(vinnie_Assets.guy1);
		this.audio.registerSound(vinnie_Assets.vin12);
		this.audio.registerSound(vinnie_Assets.guy2);
		this.audio.registerSound(vinnie_Assets.vin13);
		this.audio.registerSound(vinnie_Assets.guy3);
		this.audio.registerSound(vinnie_Assets.vin14);
		this.audio.registerSound(vinnie_Assets.guy4);
		this.audio.registerSound(vinnie_Assets.vin15);
		this.audio.registerSound(vinnie_Assets.guy5);
		this.audio.registerSound(vinnie_Assets.vin16);
	}
	,__class__: vinnie_Scene8
});
var vinnie_Scene12 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 399;
	this.height = 193;
	this.title = "Scene Twelve";
	this.allowDragging = false;
};
$hxClasses["vinnie.Scene12"] = vinnie_Scene12;
vinnie_Scene12.__name__ = "vinnie.Scene12";
vinnie_Scene12.__super__ = vinnie_Scene;
vinnie_Scene12.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		vinnie_Scene.prototype.start.call(this);
		this.makeArt(vinnie_Assets.bgScene12,0,0,$bind(this,this.onChasmClicked));
		var _g = $bind(this,this.bonusScene);
		var id = 1;
		this.makeClickHotspot(297,4,36,49,function() {
			_g(id);
		});
		var _g1 = $bind(this,this.message);
		var msg = "This isn't funny anymore.";
		this.makeClickHotspot(31,123,27,27,function() {
			return _g1(msg);
		});
		var _g2 = $bind(this,this.message);
		var msg1 = "Keep clicking.";
		this.makeClickHotspot(94,101,31,37,function() {
			return _g2(msg1);
		});
		this.makeVinnie(336,16);
		this.jerk = this.makeArt(vinnie_Assets.jerk,344,16);
		this.jerk.style.display = "none";
	}
	,onChasmClicked: function() {
		var _gthis = this;
		this.message("Travelling for thirty more days you come to a cliff.  You realise you are desperately lost.  You need to find away to rise above Underworld and continue your exciting adventure.  Suddenly a nasty creature jumps from behind you!  It pushes you off the cliff!",null,vinnie_MessageIcon.Caution).then(function() {
			_gthis.jerk.style.display = "block";
			var _gthis1 = _gthis;
			var _gthis2 = _gthis.vinnie;
			var _g = new haxe_ds_StringMap();
			_g.h["top"] = _gthis.height + 32;
			_gthis1.animate(_gthis2,1.0,_g,$bind(_gthis,_gthis.onFallComplete));
		});
	}
	,onFallComplete: function() {
		var _gthis = this;
		var pause = true;
		if(pause == null) {
			pause = false;
		}
		this.audio.playSound(vinnie_Assets.death,pause).then(function() {
			_gthis.message("Oddly enough you did not die.  Instead, you landed on a strategically placed mountain of breakfast cereal.").then(function() {
				var pause = true;
				if(pause == null) {
					pause = false;
				}
				_gthis.audio.playSound(vinnie_Assets.trainWhistle,pause).then(function() {
					_gthis.message("You discover a nearby train station.  You hop aboard the train bound for an unknown destination.","Vinnie's Tomb Chapter One",vinnie_MessageIcon.None).then(function() {
						_gthis.message("Being a low budget game, we could not afford a real train, so you'll have to imagine it.").then(function() {
							_gthis.nextScene(vinnie_Scene13);
						});
					});
				});
			});
		});
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene12);
		this.game.preloader.preloadArt(vinnie_Assets.jerk);
		this.game.preloader.preloadSound(vinnie_Assets.death);
		this.game.preloader.preloadSound(vinnie_Assets.trainWhistle);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerSound(vinnie_Assets.death);
		this.audio.registerSound(vinnie_Assets.trainWhistle);
	}
	,__class__: vinnie_Scene12
});
var vinnie_MainMenu = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 446;
	this.height = 347;
};
$hxClasses["vinnie.MainMenu"] = vinnie_MainMenu;
vinnie_MainMenu.__name__ = "vinnie.MainMenu";
vinnie_MainMenu.__super__ = vinnie_Scene;
vinnie_MainMenu.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.body.style.backgroundColor = "#ffe0c0";
		var menuDiv = this.document.createElement("div");
		menuDiv.style.margin = "0 auto";
		menuDiv.style.textAlign = "center";
		this.mainView.appendChild(menuDiv);
		var titleDiv = this.document.createElement("div");
		titleDiv.style.margin = "9px auto";
		titleDiv.style.position = "relative";
		menuDiv.appendChild(titleDiv);
		var img = this.document.createElement("img");
		img.src = "assets/art/" + vinnie_Assets.title + ".gif";
		img.style.display = "block";
		img.style.margin = "0 auto";
		titleDiv.appendChild(img);
		var subtitleDiv = this.document.createElement("div");
		subtitleDiv.style.position = "absolute";
		subtitleDiv.style.bottom = "5px";
		subtitleDiv.style.width = "100%";
		subtitleDiv.style.fontWeight = "bold";
		titleDiv.appendChild(subtitleDiv);
		var subtitleText = this.document.createElement("span");
		subtitleText.style.fontSize = "120%";
		subtitleText.style.fontStyle = "italic";
		subtitleText.appendChild(this.document.createTextNode("The Road to Vinnie's Tomb"));
		subtitleDiv.appendChild(subtitleText);
		subtitleDiv.appendChild(this.document.createElement("br"));
		var subtitleText = this.document.createElement("span");
		subtitleText.appendChild(this.document.createTextNode("(For Lack of A Better Title)"));
		subtitleDiv.appendChild(subtitleText);
		var button = this.makeButton("Begin The Game");
		button.style.margin = "2px auto 7px auto";
		button.style.width = "299px";
		button.style.height = "38px";
		var buttonHandler = this.makeHandler(function() {
			_gthis.game.startScene(new vinnie_Scene1(_gthis.game));
		});
		button.onclick = function(_) {
			buttonHandler();
		};
		menuDiv.appendChild(button);
		this.passCodeDiv = this.document.createElement("div");
		this.passCodeDiv.style.margin = "0 auto 33px auto";
		this.passCodeDiv.style.display = "block";
		menuDiv.appendChild(this.passCodeDiv);
		this.passCodeText = this.document.createElement("input");
		this.passCodeText.style.display = "none";
		this.passCodeText.style.width = "81px";
		this.passCodeText.style.height = "30px";
		this.passCodeText.style.float = "left";
		this.passCodeText.style.font = "Times New Roman";
		this.passCodeText.style.fontSize = "22px";
		this.passCodeText.style.textTransform = "uppercase";
		this.passCodeText.maxLength = 5;
		this.passCodeDiv.appendChild(this.passCodeText);
		this.passCodeButton = this.makeButton("Enter Pass Code");
		var buttonHandler2 = this.makeHandler(function() {
			_gthis.onEnterPassCodeClicked();
		});
		this.passCodeButton.onclick = buttonHandler2;
		this.passCodeButton.style.margin = "0 auto";
		this.passCodeButton.style.width = "299px";
		this.passCodeButton.style.height = "38px";
		this.passCodeDiv.appendChild(this.passCodeButton);
		var footer = this.document.createElement("div");
		footer.style.position = "absolute";
		footer.style.width = "100%";
		footer.style.height = "81px";
		footer.style.bottom = "0";
		footer.style.margin = "0";
		footer.style.padding = "0";
		footer.style.borderTop = "3px solid black";
		this.mainView.appendChild(footer);
		var helpDiv = this.document.createElement("div");
		helpDiv.style.float = "left";
		helpDiv.style.marginLeft = "12px";
		helpDiv.style.marginTop = "12px";
		footer.appendChild(helpDiv);
		var vinnie = this.document.createElement("img");
		vinnie.src = "assets/art/" + vinnie_Assets.vinnieShades + ".gif";
		vinnie.style.float = "left";
		vinnie.style.margin = "0 15px 0 0";
		helpDiv.appendChild(vinnie);
		var helpText = this.document.createElement("div");
		helpText.style.fontFamily = "\"Times New Roman\",serif";
		helpText.style.fontSize = "14.25pt";
		helpText.style.fontWeight = "400";
		helpText.style.width = "300px";
		helpText.appendChild(this.document.createTextNode("Press F1 at anytime for help and information."));
		helpText.onclick = function(_) {
			_gthis.game.help();
		};
		helpDiv.appendChild(helpText);
		var versionText = this.document.createElement("div");
		versionText.appendChild(this.document.createTextNode("Web Version"));
		versionText.style.textAlign = "right";
		versionText.style.position = "absolute";
		versionText.style.right = "0px";
		versionText.style.fontFamily = "\"MS Sans Serif\",sans-serif";
		versionText.style.fontSize = "13.5pt";
		versionText.style.fontWeight = "400";
		versionText.style.fontWeight = "700";
		versionText.style.marginRight = "12px";
		versionText.style.marginTop = "12px";
		footer.appendChild(versionText);
		var hotspot = this.makeClickHotspot(13,171,39,32,$bind(this,this.onLightBulb));
		hotspot.onmouseover = function(_) {
			_gthis.setCursor(vinnie_Assets.lightBulb);
		};
		hotspot.onmouseout = function(_) {
			_gthis.setCursor(null);
		};
		this.lightBulbCount = 0;
		this.audio.playMusic(vinnie_Assets.musicIntro);
	}
	,end: function() {
		vinnie_Scene.prototype.end.call(this);
	}
	,onLightBulb: function() {
		var _gthis = this;
		this.message("It's nice to see you again Fred.  How are the wife and kids?","Hello.",vinnie_MessageIcon.Info).then(function() {
			_gthis.lightBulbCount++;
			if(_gthis.lightBulbCount >= 6) {
				_gthis.audio.playSound(vinnie_Assets.completeScene,true).then(function() {
					_gthis.game.bonusScenes = true;
					_gthis.game.unlockMedal(48595);
					_gthis.message("You now have access to the bonus scenes.  All you have to do is find them.","Vinnie's Tomb Chapter One",vinnie_MessageIcon.None);
				});
			}
		});
	}
	,makeButton: function(label) {
		var button = this.document.createElement("button");
		button.appendChild(this.document.createTextNode(label));
		button.style.fontSize = "13.5pt";
		button.style.fontWeight = "400";
		button.style.fontFamily = "\"MS Sans Serif\",sans-serif";
		button.style.display = "block";
		return button;
	}
	,onEnterPassCodeClicked: function() {
		var _gthis = this;
		if(this.passCodeText.style.display == "none") {
			this.passCodeDiv.style.width = "300px";
			this.passCodeDiv.style.height = "30px";
			this.passCodeDiv.style.border = "1px solid black";
			this.passCodeDiv.style.backgroundColor = "white";
			this.passCodeDiv.style.padding = "11px 7px";
			this.passCodeButton.style.width = "211px";
			this.passCodeButton.style.height = "30px";
			this.passCodeText.style.display = "block";
		} else {
			var passInfo = vinnie_MainMenu.PASSCODE_GAMES.h[this.passCodeText.value.toUpperCase()];
			if(passInfo == null) {
				var pause = true;
				if(pause == null) {
					pause = false;
				}
				this.audio.playSound(vinnie_Assets.vin22,pause).then(function() {
					_gthis.message("INVALID PASS CODE","Sorry",vinnie_MessageIcon.Caution);
				});
			} else {
				var pause = true;
				if(pause == null) {
					pause = false;
				}
				this.audio.playSound(vinnie_Assets.completeScene,pause).then(function() {
					var _g = 0;
					var _g1 = passInfo.inventory;
					while(_g < _g1.length) {
						var item = _g1[_g];
						++_g;
						_gthis.inventory.addItem(item);
					}
					_gthis.game.shadesOn = passInfo.shades;
					var scene = Type.createInstance(passInfo.scene,[_gthis.game]);
					scene.preload();
					_gthis.game.startScene(scene);
				});
			}
		}
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadArt(vinnie_Assets.title);
		this.game.preloader.preloadArt(vinnie_Assets.vinnieShades);
		this.game.preloader.preloadArt(vinnie_Assets.lightBulb);
		this.game.preloader.preloadMusic(vinnie_Assets.musicIntro);
		this.game.preloader.preloadSound(vinnie_Assets.completeScene);
		this.game.preloader.preloadSound(vinnie_Assets.vin22);
		this.game.preloader.preloadSound(vinnie_Assets.completeScene);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicIntro);
		this.audio.registerSound(vinnie_Assets.completeScene);
		this.audio.registerSound(vinnie_Assets.vin22);
		this.audio.registerSound(vinnie_Assets.completeScene);
	}
	,__class__: vinnie_MainMenu
});
var vinnie_Preloader = function(game) {
	this.game = game;
	this.preloadedAssets = new haxe_ds_StringMap();
	this.requestQueue = [];
	this.isPreloading = false;
	this.image = new Image();
	this.audio = new Audio();
};
$hxClasses["vinnie.Preloader"] = vinnie_Preloader;
vinnie_Preloader.__name__ = "vinnie.Preloader";
vinnie_Preloader.prototype = {
	preloadArt: function(art) {
		this.addPreloadRequest(vinnie__$Preloader_PreloadRequest.Image("assets/art/" + art + ".gif"));
	}
	,preloadSound: function(sound) {
		this.addPreloadRequest(vinnie__$Preloader_PreloadRequest.Audio("assets/sounds/" + sound,sound));
	}
	,preloadMusic: function(sound) {
		this.addPreloadRequest(vinnie__$Preloader_PreloadRequest.Audio("assets/music/" + sound + ".mp3",sound));
	}
	,beginPreload: function() {
		if(this.curRequest == null) {
			this.preloadNextAsset();
		}
	}
	,addPreloadRequest: function(request) {
		var url;
		switch(request._hx_index) {
		case 0:
			var url1 = request.url;
			url = url1;
			break;
		case 1:
			var _g = request.id;
			var url1 = request.url;
			url = url1;
			break;
		}
		if(Object.prototype.hasOwnProperty.call(this.preloadedAssets.h,url)) {
			return;
		}
		this.preloadedAssets.h[url] = true;
		this.requestQueue.push(request);
		this.isPreloading = true;
	}
	,preloadNextAsset: function() {
		var _gthis = this;
		if(this.requestQueue.length > 0) {
			this.curRequest = this.requestQueue.pop();
			var _g = this.curRequest;
			switch(_g._hx_index) {
			case 0:
				var url = _g.url;
				this.image.src = url;
				this.image.onload = $bind(this,this.onAssetLoaded);
				this.image.onerror = $bind(this,this.onAssetLoaded);
				break;
			case 1:
				var _g1 = _g.id;
				var url = _g.url;
				this.audio.autoplay = false;
				this.audio.oncanplaythrough = $bind(this,this.onAssetLoaded);
				this.audio.onerror = $bind(this,this.onAssetLoaded);
				this.audio.src = url;
				this.audio.load();
				break;
			}
		} else {
			this.curRequest = null;
		}
		if(this.requestQueue.length == 0 || this.curRequest == null) {
			this.isPreloading = false;
			haxe_Timer.delay(function() {
				if(!_gthis.isPreloading && _gthis.onPreloadComplete != null) {
					_gthis.onPreloadComplete();
				}
			},1);
		}
	}
	,onAssetLoaded: function(e) {
		if(this.curRequest != null) {
			var _g = this.curRequest;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.url;
				this.image.onload = null;
				this.image.onerror = null;
				break;
			case 1:
				var _g1 = _g.url;
				var id = _g.id;
				this.audio.onerror = null;
				this.audio.oncanplaythrough = null;
				break;
			}
		}
		this.preloadNextAsset();
	}
	,__class__: vinnie_Preloader
};
var vinnie__$Preloader_PreloadRequest = $hxEnums["vinnie._Preloader.PreloadRequest"] = { __ename__ : true, __constructs__ : ["Image","Audio"]
	,Image: ($_=function(url) { return {_hx_index:0,url:url,__enum__:"vinnie._Preloader.PreloadRequest",toString:$estr}; },$_.__params__ = ["url"],$_)
	,Audio: ($_=function(url,id) { return {_hx_index:1,url:url,id:id,__enum__:"vinnie._Preloader.PreloadRequest",toString:$estr}; },$_.__params__ = ["url","id"],$_)
};
var vinnie_MessageHandle = function(game,modalDiv,okButton) {
	var _gthis = this;
	this.onComplete = function() {
		if(modalDiv != null && modalDiv.parentElement != null) {
			modalDiv.parentElement.removeChild(modalDiv);
		}
		game.isPaused = false;
	};
	okButton.onclick = function(_) {
		_gthis.onComplete();
	};
};
$hxClasses["vinnie.MessageHandle"] = vinnie_MessageHandle;
vinnie_MessageHandle.__name__ = "vinnie.MessageHandle";
vinnie_MessageHandle.prototype = {
	then: function(f) {
		var oldOnComplete = this.onComplete;
		this.onComplete = function() {
			oldOnComplete();
			f();
		};
		return this;
	}
	,__class__: vinnie_MessageHandle
};
var vinnie_MessageIcon = $hxEnums["vinnie.MessageIcon"] = { __ename__ : true, __constructs__ : ["None","Info","Caution"]
	,None: {_hx_index:0,__enum__:"vinnie.MessageIcon",toString:$estr}
	,Info: {_hx_index:1,__enum__:"vinnie.MessageIcon",toString:$estr}
	,Caution: {_hx_index:2,__enum__:"vinnie.MessageIcon",toString:$estr}
};
var vinnie_Scene1 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 398;
	this.height = 199;
	this.title = "Scene One";
};
$hxClasses["vinnie.Scene1"] = vinnie_Scene1;
vinnie_Scene1.__name__ = "vinnie.Scene1";
vinnie_Scene1.__super__ = vinnie_Scene;
vinnie_Scene1.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.audio.playMusic(vinnie_Assets.musicScene1);
		this.makeArt(vinnie_Assets.bgScene1,0,0);
		this.makeHoverHotspot(376,144,25,57,$bind(this,this.cancelDrag));
		this.makeHoverHotspot(312,176,57,17,$bind(this,this.cancelDrag));
		var sadEthel = this.makeArt(vinnie_Assets.sadEthel,339,144,function() {
			_gthis.message("That's Sad Ethel, the sea beastie from Edmonton.");
		});
		this.makeVinnie(344,64);
		this.makeItem(vinnie_InventoryItemType.Magnet,56,40);
		var _g = $bind(this,this.message);
		var msg = "No one is quite sure if this is real grass.";
		this.makeClickHotspot(147,47,64,38,function() {
			return _g(msg);
		});
		this.makeArt(vinnie_Assets.exitLeft,8,168,function() {
			_gthis.nextScene(vinnie_Scene2);
		});
		this.audio.playSound(vinnie_Assets.narIntro);
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene1);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene1);
		this.game.preloader.preloadArt(vinnie_Assets.sadEthel);
		this.game.preloader.preloadArt(vinnie_Assets.exitLeft);
		this.game.preloader.preloadSound(vinnie_Assets.narIntro);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene1);
		this.audio.registerSound(vinnie_Assets.narIntro);
	}
	,__class__: vinnie_Scene1
});
var vinnie_Scene10 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 401;
	this.height = 216;
	this.title = "Scene Ten";
};
$hxClasses["vinnie.Scene10"] = vinnie_Scene10;
vinnie_Scene10.__name__ = "vinnie.Scene10";
vinnie_Scene10.__super__ = vinnie_Scene;
vinnie_Scene10.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.allowDragging = false;
		this.audio.playMusic(vinnie_Assets.musicScene3);
		this.bg = this.makeArt(vinnie_Assets.bgScene10,0,0);
		this.makeHoverHotspot(8,24,201,177,$bind(this,this.onBeastHover));
		this.makeHoverHotspot(0,0,401,145,$bind(this,this.cancelDrag));
		this.cd = this.makeItem(vinnie_InventoryItemType.CD,200,168);
		this.cd.style.display = "none";
		this.vinnieLine = this.makeArt(vinnie_Assets.scene10Line2,295,145);
		this.vinnieDialog = this.makeDialogBox(256,80,161,65,"black","white");
		this.vinnieDialog.style.fontWeight = "normal";
		this.beastLine = this.makeArt(vinnie_Assets.scene10Line1,151,72);
		this.beastDialog = this.makeDialogBox(168,8,225,65,"black","white");
		this.beastDialog.style.fontWeight = "normal";
		this.makeVinnie(312,160);
		var beastSpeak = function(sound,dialog) {
			_gthis.vinnieLine.style.display = _gthis.vinnieDialog.style.display = "none";
			_gthis.beastLine.style.display = _gthis.beastDialog.style.display = "block";
			_gthis.beastDialog.textContent = dialog;
			if(sound != null) {
				_gthis.audio.playSound(sound,false);
			}
		};
		var vinnieSpeak = function(sound,dialog) {
			_gthis.vinnieLine.style.display = _gthis.vinnieDialog.style.display = "block";
			_gthis.beastLine.style.display = _gthis.beastDialog.style.display = "none";
			_gthis.vinnieDialog.textContent = dialog;
			_gthis.audio.playSound(sound,false);
		};
		beastSpeak(null,"Zzzzzzzzzzzzzzzz");
		this.exit = this.makeArt(vinnie_Assets.exitLeft,1,154,$bind(this,this.onExitClicked));
		this.exit.style.display = "none";
		var sound = vinnie_Assets.vin32;
		var dialog = "Excuse me?  Are you sleeping?";
		var tmp = function() {
			vinnieSpeak(sound,dialog);
		};
		var sound1 = vinnie_Assets.vin33;
		var dialog1 = "You look very tired.";
		var tmp1 = function() {
			vinnieSpeak(sound1,dialog1);
		};
		var sound2 = vinnie_Assets.sing2;
		var dialog2 = "What do you expect?  I’ve been singing and dancing all night long.";
		var tmp2 = function() {
			beastSpeak(sound2,dialog2);
		};
		var sound3 = vinnie_Assets.vin34;
		var dialog3 = "Are you the monster that keeps everyone awake at night?";
		var tmp3 = function() {
			vinnieSpeak(sound3,dialog3);
		};
		var sound4 = vinnie_Assets.sing3;
		var dialog4 = "Yes.  What are you going to do about it?";
		var tmp4 = function() {
			beastSpeak(sound4,dialog4);
		};
		var sound5 = vinnie_Assets.vin35;
		var dialog5 = "It’s very rude of you to keep everyone in Fun Land up at night.";
		var tmp5 = function() {
			vinnieSpeak(sound5,dialog5);
		};
		var sound6 = vinnie_Assets.sing4;
		var dialog6 = "I don’t care.  It’s my nature to sing, dance and tell jokes at night.";
		var tmp6 = function() {
			beastSpeak(sound6,dialog6);
		};
		var sound7 = vinnie_Assets.vin36;
		var dialog7 = "Why?";
		var tmp7 = function() {
			vinnieSpeak(sound7,dialog7);
		};
		var sound8 = vinnie_Assets.sing5;
		var dialog8 = "Why do you think?  I’m a nocturnal kind of beast.";
		var tmp8 = function() {
			beastSpeak(sound8,dialog8);
		};
		var sound9 = vinnie_Assets.vin22;
		var dialog9 = "Do you know anything about Vinnie's Tomb?";
		var tmp9 = function() {
			vinnieSpeak(sound9,dialog9);
		};
		var sound10 = vinnie_Assets.sing6;
		var dialog10 = "Sure.  I wrote a song about it.  Do you want to hear it?";
		var tmp10 = function() {
			beastSpeak(sound10,dialog10);
		};
		var sound11 = vinnie_Assets.vin37;
		var dialog11 = "I guess so.";
		var tmp11 = function() {
			vinnieSpeak(sound11,dialog11);
		};
		var sound12 = vinnie_Assets.sing7;
		var dialog12 = "Then leave me alone, and come back tonight.  I’ll sing it for you then.";
		var tmp12 = function() {
			beastSpeak(sound12,dialog12);
		};
		var sound13 = vinnie_Assets.vin38;
		var dialog13 = "I want to hear it now.";
		var tmp13 = function() {
			vinnieSpeak(sound13,dialog13);
		};
		var sound14 = vinnie_Assets.vin40;
		var dialog14 = "Thanks, but I don’t have a CD player.";
		var tmp14 = function() {
			vinnieSpeak(sound14,dialog14);
		};
		var sound15 = vinnie_Assets.sing9;
		var dialog15 = "That's tough.  Go away.";
		this.dialog([function() {
		},tmp,function() {
			beastSpeak(vinnie_Assets.sing1,"I’m awake now, thanks to you.");
			_gthis.bg.src = "assets/art/" + vinnie_Assets.bgScene10Awake + ".gif";
		},tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7,tmp8,tmp9,tmp10,tmp11,tmp12,tmp13,function() {
			beastSpeak(vinnie_Assets.sing8,"Listen, you little punk.  I’ve had about enough of you!  Wait a minute.  I’ll give you a CD of the song.  You can hear it anytime.");
			_gthis.cd.style.display = "block";
		},tmp14,function() {
			beastSpeak(sound15,dialog15);
		},function() {
			_gthis.vinnieLine.style.display = _gthis.vinnieDialog.style.display = "none";
			_gthis.beastLine.style.display = _gthis.beastDialog.style.display = "none";
			_gthis.exit.style.display = "block";
			_gthis.allowDragging = true;
			_gthis.inventory.show();
		}]);
	}
	,onBeastHover: function() {
		var _gthis = this;
		if(this.isEquipped(vinnie_InventoryItemType.Sword)) {
			this.audio.playSound(vinnie_Assets.sing11,false);
			this.message("Please don't hurt me.  I'll stop singing at night, if you leave me alone.","The Singing Beast Says ...").then(function() {
				_gthis.transitionToNextScene(vinnie_Scene11,function(handler) {
					_gthis.inventory.show();
					_gthis.inventory.addItem(vinnie_InventoryItemType.Underwear);
					_gthis.inventory.addItem(vinnie_InventoryItemType.Cheese);
					_gthis.audio.playSound(vinnie_Assets.nar3,false);
					_gthis.message("Word quickly spreads that you have stopped the beast from singing at night.  After everyone in Fun Land has a good night's sleep, they give you a load of cash and a nicely written thank you note.  You decide to use the money to buy the key from the ill conceived horse.  On the way to the horse's newly constructed hay shack and rib joint  you meet a frog on welfare.  Still feeling like a philanthropist, you foolishly give the frog most of our money.  Fortunately, you still have enough to buy a pair of underwear and cheese.").then(function() {
						_gthis.inventory.addItem(vinnie_InventoryItemType.Money);
						_gthis.audio.playSound(vinnie_Assets.nar4,false);
						_gthis.message("You decide to buy a lottery ticket with your last dollar.  Fun Land is a peachy place.  You find that the creatures there are really kind and decent.  You meet a monster snail who lets you stay at his hotel free of charge.  In the morning you are informed that the singing beast has moved to Australia.  He will be performing at the opera house one month a week.  You're glad he made out okay.  You are delighted when you win five hundred dollars in the lottery.  You rush to find the horse and buy the key.").then(handler);
					});
				});
			});
		} else if(this.equippedItem != null) {
			this.audio.playSound(vinnie_Assets.sing10,false);
			this.message("I don't want that.  Get lost!","The Singing Beast says ....");
		}
	}
	,onExitClicked: function() {
		this.nextScene(vinnie_Scene12);
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene3);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene10);
		this.game.preloader.preloadArt(vinnie_Assets.scene10Line2);
		this.game.preloader.preloadArt(vinnie_Assets.scene10Line1);
		this.game.preloader.preloadArt(vinnie_Assets.exitLeft);
		this.game.preloader.preloadSound(vinnie_Assets.vin32);
		this.game.preloader.preloadSound(vinnie_Assets.sing1);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene10Awake);
		this.game.preloader.preloadSound(vinnie_Assets.vin33);
		this.game.preloader.preloadSound(vinnie_Assets.sing2);
		this.game.preloader.preloadSound(vinnie_Assets.vin34);
		this.game.preloader.preloadSound(vinnie_Assets.sing3);
		this.game.preloader.preloadSound(vinnie_Assets.vin35);
		this.game.preloader.preloadSound(vinnie_Assets.sing4);
		this.game.preloader.preloadSound(vinnie_Assets.vin36);
		this.game.preloader.preloadSound(vinnie_Assets.sing5);
		this.game.preloader.preloadSound(vinnie_Assets.vin22);
		this.game.preloader.preloadSound(vinnie_Assets.sing6);
		this.game.preloader.preloadSound(vinnie_Assets.vin37);
		this.game.preloader.preloadSound(vinnie_Assets.sing7);
		this.game.preloader.preloadSound(vinnie_Assets.vin38);
		this.game.preloader.preloadSound(vinnie_Assets.sing8);
		this.game.preloader.preloadSound(vinnie_Assets.vin40);
		this.game.preloader.preloadSound(vinnie_Assets.sing9);
		this.game.preloader.preloadSound(vinnie_Assets.sing11);
		this.game.preloader.preloadSound(vinnie_Assets.nar3);
		this.game.preloader.preloadSound(vinnie_Assets.nar4);
		this.game.preloader.preloadSound(vinnie_Assets.sing10);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene3);
		this.audio.registerSound(vinnie_Assets.vin32);
		this.audio.registerSound(vinnie_Assets.sing1);
		this.audio.registerSound(vinnie_Assets.vin33);
		this.audio.registerSound(vinnie_Assets.sing2);
		this.audio.registerSound(vinnie_Assets.vin34);
		this.audio.registerSound(vinnie_Assets.sing3);
		this.audio.registerSound(vinnie_Assets.vin35);
		this.audio.registerSound(vinnie_Assets.sing4);
		this.audio.registerSound(vinnie_Assets.vin36);
		this.audio.registerSound(vinnie_Assets.sing5);
		this.audio.registerSound(vinnie_Assets.vin22);
		this.audio.registerSound(vinnie_Assets.sing6);
		this.audio.registerSound(vinnie_Assets.vin37);
		this.audio.registerSound(vinnie_Assets.sing7);
		this.audio.registerSound(vinnie_Assets.vin38);
		this.audio.registerSound(vinnie_Assets.sing8);
		this.audio.registerSound(vinnie_Assets.vin40);
		this.audio.registerSound(vinnie_Assets.sing9);
		this.audio.registerSound(vinnie_Assets.sing11);
		this.audio.registerSound(vinnie_Assets.nar3);
		this.audio.registerSound(vinnie_Assets.nar4);
		this.audio.registerSound(vinnie_Assets.sing10);
	}
	,__class__: vinnie_Scene10
});
var vinnie_Scene11 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 401;
	this.height = 200;
	this.title = "Scene Eleven";
};
$hxClasses["vinnie.Scene11"] = vinnie_Scene11;
vinnie_Scene11.__name__ = "vinnie.Scene11";
vinnie_Scene11.__super__ = vinnie_Scene;
vinnie_Scene11.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		vinnie_Scene.prototype.start.call(this);
		this.audio.playMusic(vinnie_Assets.musicScene1);
		this.makeArt(vinnie_Assets.bgScene9Visible,0,0);
		this.makeHoverHotspot(0,0,401,153,$bind(this,this.cancelDrag));
		this.makeClickHotspot(8,32,193,169,$bind(this,this.onHorseClicked));
		this.makeItem(vinnie_InventoryItemType.Key,200,168,false,$bind(this,this.onKeyClicked));
		this.makeVinnie(320,152);
		this.inventory.show();
	}
	,onHorseClicked: function() {
		var _gthis = this;
		if(this.isEquipped(vinnie_InventoryItemType.Money)) {
			this.audio.playSound(vinnie_Assets.getItem,true).then(function() {
				_gthis.equipItem(null);
				_gthis.inventory.removeItem(vinnie_InventoryItemType.Money);
				_gthis.inventory.addItem(vinnie_InventoryItemType.Key);
				_gthis.message("You buy the key from the horse.  You now have the key to Vinnie's Tomb!","Item collected!").then(function() {
					var passCode = _gthis.game.shadesOn ? _gthis.inventory.hasItem(vinnie_InventoryItemType.EightBall) ? "METTA" : "SETTA" : _gthis.inventory.hasItem(vinnie_InventoryItemType.EightBall) ? "RETTA" : "NETTA";
					_gthis.nextScene(vinnie_Scene12,passCode);
				});
			});
		} else if(this.isDraggingVinnie || this.equippedItem != null) {
			var handler = this.message("The horse wants something else for the key.","Vinnie's Tomb Chapter One",vinnie_MessageIcon.None);
			if(this.isEquipped(vinnie_InventoryItemType.Sword)) {
				var _g = $bind(this,this.message);
				var msg = "You really must stop threatning creatures with your sword.";
				handler.then(function() {
					return _g(msg);
				});
			}
		}
	}
	,onKeyClicked: function() {
		this.message("You cannot take the key.  The horse would get mad.");
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene1);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene9Visible);
		this.game.preloader.preloadSound(vinnie_Assets.getItem);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene1);
		this.audio.registerSound(vinnie_Assets.getItem);
	}
	,__class__: vinnie_Scene11
});
var vinnie_Scene13 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 435;
	this.height = 254;
	this.title = "Scene Thirteen";
};
$hxClasses["vinnie.Scene13"] = vinnie_Scene13;
vinnie_Scene13.__name__ = "vinnie.Scene13";
vinnie_Scene13.__super__ = vinnie_Scene;
vinnie_Scene13.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		vinnie_Scene.prototype.start.call(this);
		this.madeSlingshot = false;
		this.audio.playMusic(vinnie_Assets.musicScene7);
		this.makeArt(vinnie_Assets.bgScene13,0,0);
		this.makeClickHotspot(146,204,103,49,$bind(this,this.onGapClicked));
		var _g = $bind(this,this.message);
		var msg = "Join the vinnie's Tomb fan club.";
		this.makeClickHotspot(317,231,50,24,function() {
			return _g(msg);
		});
		this.makeHoverHotspot(0,0,433,193,$bind(this,this.onFellInChasm));
		this.makeArt(vinnie_Assets.book,368,208,$bind(this,this.onBookClicked));
		this.slingshot = this.makeArt(vinnie_Assets.twig,256,192,$bind(this,this.onSlingshotClicked));
		this.sphere = this.makeArt(vinnie_Assets.sphereOfLight,12,0);
		this.makeVinnie(296,184);
		this.exit = this.makeArt(vinnie_Assets.exitRight,392,16,$bind(this,this.onExitClicked));
		this.exit.style.display = "none";
		this.makeClickHotspot(0,0,93,69,$bind(this,this.onSphereClicked));
		this.inventory.show();
	}
	,onBookClicked: function() {
		if(this.isDraggingVinnie) {
			this.cancelDrag();
			this.message("To cross the pit use the sphere of light.  It rests on the other side.  You must wake it if you can.  Then you can get a ride.","You Read The Book ...");
		}
	}
	,onSphereClicked: function() {
		if(this.isEquipped(vinnie_InventoryItemType.EightBall)) {
			this.message("The chasm is too wide.  You cannot throw the eight ball that far.");
		}
	}
	,onFellInChasm: function() {
		var _gthis = this;
		if(this.isDraggingVinnie) {
			this.game.unlockMedal(48592);
			this.cancelDrag();
			this.vinnie.style.display = "none";
			this.vinnieDied();
			this.message("You fall into the pit of fear and die!","OH NO!",vinnie_MessageIcon.Caution).then(function() {
				_gthis.document.onclick = function(_) {
					_gthis.exitGame();
				};
			});
		}
	}
	,onGapClicked: function() {
		if(this.game.bonusScenes) {
			this.bonusScene(2);
		} else {
			this.cancelDrag();
		}
	}
	,onSlingshotClicked: function() {
		if(!this.madeSlingshot) {
			if(this.isEquipped(vinnie_InventoryItemType.Underwear)) {
				this.message("You stretch the underwear over the forked stick in the ground.  Now you have a neato slingshot device.  Wow, this is a cool game!","Vinnie's Tomb Chapter One",vinnie_MessageIcon.None);
				this.slingshot.src = "assets/art/" + vinnie_Assets.slingshot + ".gif";
				this.inventory.removeItem(vinnie_InventoryItemType.Underwear);
				this.equipItem(null);
				this.madeSlingshot = true;
			}
		} else if(this.isEquipped(vinnie_InventoryItemType.EightBall)) {
			this.inventory.removeItem(vinnie_InventoryItemType.EightBall);
			this.equipItem(null);
			this.crossPitOfFear();
		} else {
			this.message("You can't do that with the forked stick.");
		}
	}
	,crossPitOfFear: function() {
		var _gthis = this;
		this.audio.playSound(vinnie_Assets.sphereZap,false);
		this.allowDragging = false;
		this.vinnie.style.left = "296px";
		this.vinnie.style.top = "184px";
		var ball = this.makeArt(vinnie_Assets.eightBall,256,176);
		var ball1 = ball;
		var _g = new haxe_ds_StringMap();
		_g.h["left"] = 39;
		_g.h["top"] = 27;
		this.animate(ball1,0.4,_g,function() {
			ball.parentNode.removeChild(ball);
			ball = null;
			var _gthis1 = _gthis;
			var _gthis2 = _gthis.sphere;
			var _g = new haxe_ds_StringMap();
			_g.h["left"] = 39;
			_g.h["top"] = 27;
			var _g1 = $bind(_gthis,_gthis.animate);
			var elem = _gthis.sphere;
			var time = 0.2;
			var _g2 = new haxe_ds_StringMap();
			_g2.h["left"] = 62;
			_g2.h["top"] = 144;
			var properties = _g2;
			var _g2 = $bind(_gthis,_gthis.animate);
			var elem1 = _gthis.sphere;
			var time1 = 0.2;
			var _g3 = new haxe_ds_StringMap();
			_g3.h["left"] = 55;
			_g3.h["top"] = 27;
			var properties1 = _g3;
			var _g3 = $bind(_gthis,_gthis.animate);
			var elem2 = _gthis.sphere;
			var time2 = 0.2;
			var _g4 = new haxe_ds_StringMap();
			_g4.h["left"] = 270;
			_g4.h["top"] = 150;
			var properties2 = _g4;
			var _g4 = $bind(_gthis,_gthis.animate);
			var elem3 = _gthis.sphere;
			var time3 = 0.8;
			var _g5 = new haxe_ds_StringMap();
			_g5.h["left"] = 270;
			_g5.h["top"] = 150;
			var properties3 = _g5;
			var onComplete = $bind(_gthis,_gthis.pickUpVinnie);
			var onComplete1 = function() {
				_g4(elem3,time3,properties3,onComplete);
			};
			var onComplete2 = function() {
				_g3(elem2,time2,properties2,onComplete1);
			};
			var onComplete3 = function() {
				_g2(elem1,time1,properties1,onComplete2);
			};
			_gthis1.animate(_gthis2,0.2,_g,function() {
				_g1(elem,time,properties,onComplete3);
			});
		});
	}
	,pickUpVinnie: function() {
		var _gthis = this;
		if(!this.game.shadesOn) {
			this.game.unlockMedal(48593);
			this.message("The Ball of light blinds you.  Your eyes burn up and you stagger into the pit of fear and die horribly.").then(function() {
				_gthis.vinnieDied();
				_gthis.vinnie.style.display = "none";
				_gthis.exitGame();
			});
		} else {
			this.vinnie.style.display = "none";
			this.audio.playSound(vinnie_Assets.sphereZap,false);
			var tmp = this.sphere;
			var _g = new haxe_ds_StringMap();
			_g.h["left"] = 345;
			_g.h["top"] = 0;
			this.animate(tmp,0.2,_g,$bind(this,this.onPitOfFearCrossed));
		}
	}
	,onPitOfFearCrossed: function() {
		this.vinnie.style.left = "360px";
		this.vinnie.style.top = "16px";
		this.vinnie.style.display = "block";
		this.exit.style.display = "block";
	}
	,onExitClicked: function() {
		var _gthis = this;
		this.message("You have crossed the pit of fear!").then(function() {
			_gthis.nextScene(vinnie_Scene14);
		});
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene7);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene13);
		this.game.preloader.preloadArt(vinnie_Assets.book);
		this.game.preloader.preloadArt(vinnie_Assets.twig);
		this.game.preloader.preloadArt(vinnie_Assets.sphereOfLight);
		this.game.preloader.preloadArt(vinnie_Assets.exitRight);
		this.game.preloader.preloadArt(vinnie_Assets.slingshot);
		this.game.preloader.preloadSound(vinnie_Assets.sphereZap);
		this.game.preloader.preloadArt(vinnie_Assets.eightBall);
		this.game.preloader.preloadSound(vinnie_Assets.sphereZap);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene7);
		this.audio.registerSound(vinnie_Assets.sphereZap);
		this.audio.registerSound(vinnie_Assets.sphereZap);
	}
	,__class__: vinnie_Scene13
});
var vinnie_Scene14 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 399;
	this.height = 219;
	this.title = "Scene Fourteen";
	this.allowDragging = false;
};
$hxClasses["vinnie.Scene14"] = vinnie_Scene14;
vinnie_Scene14.__name__ = "vinnie.Scene14";
vinnie_Scene14.__super__ = vinnie_Scene;
vinnie_Scene14.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.smacks = 0;
		this.audio.playMusic(vinnie_Assets.musicScene8);
		this.makeArt(vinnie_Assets.bgScene14,0,0);
		this.tombDoor = this.makeRect(0,100,151,93,"#808000");
		this.rockCover = this.makeArt(vinnie_Assets.bloodRockCover,277,132);
		this.makeClickHotspot(269,123,102,61,$bind(this,this.onBloodRockClicked));
		this.vinnieDialog = this.makeDialogBox(62,84,224,61,"black","white");
		this.vinnieLine = this.makeArt(vinnie_Assets.scene14Line2,230,145);
		this.eyeDialog = this.makeDialogBox(17,81,262,60,"black","white");
		this.eyeLine = this.makeArt(vinnie_Assets.scene14Line1,82,141);
		this.makeVinnie(271,162);
		this.eye = this.makeArt(vinnie_Assets.eyeGuy,112,167);
		var vinnieSpeak = function(sound,dialog) {
			_gthis.eye.style.display = "block";
			_gthis.eyeDialog.style.display = _gthis.eyeLine.style.display = "none";
			_gthis.vinnieDialog.style.display = _gthis.vinnieLine.style.display = "block";
			_gthis.vinnieDialog.textContent = dialog;
			_gthis.audio.playSound(sound,false);
		};
		var eyeSpeak = function(sound,dialog) {
			_gthis.eye.style.display = "block";
			_gthis.eyeDialog.style.display = _gthis.eyeLine.style.display = "block";
			_gthis.vinnieDialog.style.display = _gthis.vinnieLine.style.display = "none";
			_gthis.eyeDialog.textContent = dialog;
			_gthis.audio.playSound(sound,false);
		};
		var sound = vinnie_Assets.vin41;
		var dialog = "Hello, is this the entrance to Vinnie's Tomb?";
		var tmp = function() {
			vinnieSpeak(sound,dialog);
		};
		var sound1 = vinnie_Assets.eye1;
		var dialog1 = "Allegedly, yes.  No one knows how to get in.  There are no doorways.";
		var tmp1 = function() {
			eyeSpeak(sound1,dialog1);
		};
		var sound2 = vinnie_Assets.vin42;
		var dialog2 = "The entrance must be a secret.";
		var tmp2 = function() {
			vinnieSpeak(sound2,dialog2);
		};
		var sound3 = vinnie_Assets.eye2;
		var dialog3 = "I guess so.";
		var tmp3 = function() {
			eyeSpeak(sound3,dialog3);
		};
		var sound4 = vinnie_Assets.vin44;
		var dialog4 = "What's this gray thing I'm standing in front of?  It's shaped a bit like a tombstone.";
		var tmp4 = function() {
			vinnieSpeak(sound4,dialog4);
		};
		var sound5 = vinnie_Assets.eye3;
		var dialog5 = "That is also a mystery.  It is known as the big blood rock.  Don’t ask me why.  I have to go now.  It's time to watch the PBS pledge break.  It’s nice meeting you.";
		this.dialog([tmp,tmp1,tmp2,tmp3,tmp4,function() {
			eyeSpeak(sound5,dialog5);
		},function() {
			_gthis.eye.style.display = "none";
			_gthis.eyeDialog.style.display = _gthis.eyeLine.style.display = "none";
			_gthis.vinnieDialog.style.display = _gthis.vinnieLine.style.display = "none";
			_gthis.inventory.show();
		}]);
	}
	,onBloodRockClicked: function() {
		if(this.rockCover != null) {
			if(this.equippedItem != null && this.equippedItem.type == vinnie_InventoryItemType.SkullThatOozesBloodIntermittently) {
				this.setCursor(vinnie_Assets.bloodySkull);
				var rockY = this.rockCover.offsetTop;
				rockY += 5;
				this.rockCover.style.top = "" + rockY + "px";
				this.smacks++;
				if(this.smacks >= 6) {
					this.equipItem(null);
					this.inventory.removeItem(vinnie_InventoryItemType.SkullThatOozesBloodIntermittently);
					this.audio.playSound(vinnie_Assets.eureka,false);
					this.rockCover.parentNode.removeChild(this.rockCover);
					this.rockCover = null;
					this.message("You crush the skull that oozes blood against the big blood rock.  The big blood rock opens!");
				}
			}
		} else if(this.equippedItem != null && this.equippedItem.type == vinnie_InventoryItemType.Diamond) {
			this.equipItem(null);
			this.inventory.removeItem(vinnie_InventoryItemType.Diamond);
			this.diamond = this.makeArt(vinnie_Assets.diamond,301,135);
			var tmp = this.tombDoor;
			var _g = new haxe_ds_StringMap();
			_g.h["height"] = 0;
			this.animate(tmp,3.0,_g,$bind(this,this.onDoorOpened));
		}
	}
	,onDoorOpened: function() {
		var _gthis = this;
		this.tombDoor.style.display = "none";
		var pause = true;
		if(pause == null) {
			pause = false;
		}
		this.audio.playSound(vinnie_Assets.getItem,pause).then(function() {
			_gthis.message("You have opened the main door to Vinnie's Tomb").then(function() {
				_gthis.message("The glittery diamond has melted into the big blood rock.").then(function() {
					if(_gthis.diamond != null) {
						_gthis.diamond.style.display = "none";
					}
					_gthis.message("You have completed " + _gthis.title).then(function() {
						_gthis.game.startScene(new vinnie_Scene15(_gthis.game));
					});
				});
			});
		});
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene8);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene14);
		this.game.preloader.preloadArt(vinnie_Assets.bloodRockCover);
		this.game.preloader.preloadArt(vinnie_Assets.scene14Line2);
		this.game.preloader.preloadArt(vinnie_Assets.scene14Line1);
		this.game.preloader.preloadArt(vinnie_Assets.eyeGuy);
		this.game.preloader.preloadSound(vinnie_Assets.vin41);
		this.game.preloader.preloadSound(vinnie_Assets.eye1);
		this.game.preloader.preloadSound(vinnie_Assets.vin42);
		this.game.preloader.preloadSound(vinnie_Assets.eye2);
		this.game.preloader.preloadSound(vinnie_Assets.vin44);
		this.game.preloader.preloadSound(vinnie_Assets.eye3);
		this.game.preloader.preloadArt(vinnie_Assets.bloodySkull);
		this.game.preloader.preloadSound(vinnie_Assets.eureka);
		this.game.preloader.preloadArt(vinnie_Assets.diamond);
		this.game.preloader.preloadSound(vinnie_Assets.getItem);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene8);
		this.audio.registerSound(vinnie_Assets.vin41);
		this.audio.registerSound(vinnie_Assets.eye1);
		this.audio.registerSound(vinnie_Assets.vin42);
		this.audio.registerSound(vinnie_Assets.eye2);
		this.audio.registerSound(vinnie_Assets.vin44);
		this.audio.registerSound(vinnie_Assets.eye3);
		this.audio.registerSound(vinnie_Assets.eureka);
		this.audio.registerSound(vinnie_Assets.getItem);
	}
	,__class__: vinnie_Scene14
});
var vinnie_Scene15 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 443;
	this.height = 249;
	this.title = "Scene Fifteen";
	this.allowDragging = false;
};
$hxClasses["vinnie.Scene15"] = vinnie_Scene15;
vinnie_Scene15.__name__ = "vinnie.Scene15";
vinnie_Scene15.__super__ = vinnie_Scene;
vinnie_Scene15.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		vinnie_Scene.prototype.start.call(this);
		this.audio.playMusic(vinnie_Assets.musicScene9);
		this.makeArt(vinnie_Assets.bgScene15,0,0);
		var _g = $bind(this,this.message);
		var msg = "Do not fear.  The game is almost over.";
		this.makeClickHotspot(11,55,45,22,function() {
			return _g(msg);
		});
		this.makeClickHotspot(192,168,33,33,$bind(this,this.onKeyHoleClicked));
		this.makeVinnie(114,168);
		this.inventory.show();
	}
	,onKeyHoleClicked: function() {
		var _gthis = this;
		if(this.isEquipped(vinnie_InventoryItemType.Key)) {
			this.message("You try inserting the key into the keyhole.  The key does not seem to fit!  After a few more futile attempts, you realize that the horse may have tricked you.  Perhaps, the snake brothers owned the only key to Vinnie's Tomb.  You get so mad, that you kick the door.  It creaks open.  It must have been unlocked all the time.").then(function() {
				_gthis.nextScene(vinnie_Scene16);
			});
		} else {
			this.message("Have you had a complete breakfast today?");
		}
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene9);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene15);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene9);
	}
	,__class__: vinnie_Scene15
});
var vinnie_Scene16 = function(game) {
	this.count = 0;
	vinnie_Scene.call(this,game);
	this.width = 395;
	this.height = 196;
	this.title = "Scene16";
	this.allowDragging = false;
};
$hxClasses["vinnie.Scene16"] = vinnie_Scene16;
vinnie_Scene16.__name__ = "vinnie.Scene16";
vinnie_Scene16.__super__ = vinnie_Scene;
vinnie_Scene16.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		vinnie_Scene.prototype.start.call(this);
		this.count = 0;
		this.audio.playMusic(vinnie_Assets.musicScene1);
		this.makeArt(vinnie_Assets.bgScene16,0,0);
		this.panel = this.makeRect(56,72,283,123,"#c0c0c0");
		this.panel.style.border = "3px outset white";
		var innerPanel = this.makeRect(3,3,271,111,"#c0c0c0");
		innerPanel.style.border = "3px outset white";
		this.panel.appendChild(innerPanel);
		var initX = 13;
		var initY = 13;
		var _g = 0;
		while(_g < 8) {
			var x = _g++;
			var isOdd = (x & 1) != 0;
			var xPos = initX + x * 32;
			var yPos = initY;
			var obj = this.makeArt(isOdd ? vinnie_Assets.cheese : vinnie_Assets.banana,xPos,yPos);
			this.panel.appendChild(obj);
			var isOdd1 = (x + 1 & 1) != 0;
			var xPos1 = initX + x * 32;
			var yPos1 = initY + 32;
			var obj1 = this.makeArt(isOdd1 ? vinnie_Assets.cheese : vinnie_Assets.banana,xPos1,yPos1);
			this.panel.appendChild(obj1);
			if(x == 0 || x == 7) {
				obj1.style.display = "none";
				this.panel.appendChild(this.makeHoverHotspot(xPos1,yPos1,32,32,(function(item,obj,_g) {
					return function() {
						_g[0](obj[0],item[0]);
					};
				})([x == 0 ? vinnie_InventoryItemType.Cheese : vinnie_InventoryItemType.Banana],[obj1],[$bind(this,this.onSlotHover)])));
			}
			var isOdd2 = (x + 2 & 1) != 0;
			var xPos2 = initX + x * 32;
			var yPos2 = initY + 64;
			var obj2 = this.makeArt(isOdd2 ? vinnie_Assets.cheese : vinnie_Assets.banana,xPos2,yPos2);
			this.panel.appendChild(obj2);
		}
		this.makeVinnie(352,160);
		this.inventory.show();
	}
	,onSlotHover: function(obj,item) {
		var _gthis = this;
		if(this.isEquipped(item)) {
			obj.style.display = "block";
			this.inventory.removeItem(item);
			this.equipItem(null);
			this.count++;
			if(this.count >= 2) {
				var tmp = this.panel;
				var _g = new haxe_ds_StringMap();
				_g.h["top"] = 0;
				_g.h["height"] = 195;
				this.animate(tmp,0.6,_g,function() {
					var pause = true;
					if(pause == null) {
						pause = false;
					}
					_gthis.audio.playSound(vinnie_Assets.completeScene,pause).then(function() {
						_gthis.panel.style.height = "123px";
						_gthis.message("You have complete Scene Sixteen").then(function() {
							_gthis.game.startScene(new vinnie_Scene17(_gthis.game));
						});
					});
				});
			}
		}
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene1);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene16);
		this.game.preloader.preloadArt(vinnie_Assets.cheese);
		this.game.preloader.preloadArt(vinnie_Assets.banana);
		this.game.preloader.preloadSound(vinnie_Assets.completeScene);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene1);
		this.audio.registerSound(vinnie_Assets.completeScene);
	}
	,__class__: vinnie_Scene16
});
var vinnie_Scene17 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 400;
	this.height = 200;
	this.title = "Scene 17";
	this.allowDragging = false;
};
$hxClasses["vinnie.Scene17"] = vinnie_Scene17;
vinnie_Scene17.__name__ = "vinnie.Scene17";
vinnie_Scene17.__super__ = vinnie_Scene;
vinnie_Scene17.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		vinnie_Scene.prototype.start.call(this);
		this.audio.playMusic(vinnie_Assets.musicScene2);
		this.makeArt(vinnie_Assets.bgScene17,0,0);
		this.door = this.makeArt(vinnie_Assets.scene17door,152,128);
		this.makeVinnie(272,168);
		this.makeHoverHotspot(304,168,41,33,$bind(this,this.onBeamHover));
		this.inventory.show();
	}
	,onBeamHover: function() {
		var _gthis = this;
		if(!this.isEquipped(vinnie_InventoryItemType.CD)) {
			this.message("You look at the strange beam of light.");
		} else {
			this.equipItem(null);
			var pause = true;
			if(pause == null) {
				pause = false;
			}
			this.audio.playSound(vinnie_Assets.eureka,pause).then(function() {
				_gthis.makeArt(vinnie_Assets.cdBeam,198,78);
				_gthis.message("You use the CD to reflect the beam of light.  It might not work in real life, but this is only a stupid game.").then(function() {
					var pause = true;
					if(pause == null) {
						pause = false;
					}
					_gthis.audio.playSound(vinnie_Assets.completeScene,pause).then(function() {
						_gthis.door.style.display = "none";
						_gthis.message("The door opens and you have completed Scene Seventeen.").then(function() {
							_gthis.transitionToNextScene(vinnie_Scene18,function(handler) {
								_gthis.inventory.removeAllItems();
								_gthis.audio.playSound(vinnie_Assets.death,false);
								_gthis.message("You walk into the next room of the massive tomb.  Suddenly you are attacked by a giant Dragollater!  He snatches you in his teeth.  You will most likely die!","Vinnie's Tomb",vinnie_MessageIcon.Caution).then(handler);
							});
						});
					});
				});
			});
		}
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene2);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene17);
		this.game.preloader.preloadArt(vinnie_Assets.scene17door);
		this.game.preloader.preloadSound(vinnie_Assets.eureka);
		this.game.preloader.preloadArt(vinnie_Assets.cdBeam);
		this.game.preloader.preloadSound(vinnie_Assets.completeScene);
		this.game.preloader.preloadSound(vinnie_Assets.death);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene2);
		this.audio.registerSound(vinnie_Assets.eureka);
		this.audio.registerSound(vinnie_Assets.completeScene);
		this.audio.registerSound(vinnie_Assets.death);
	}
	,__class__: vinnie_Scene17
});
var vinnie_Scene18 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 399;
	this.height = 187;
	this.title = "Scene 18";
	this.allowDragging = false;
};
$hxClasses["vinnie.Scene18"] = vinnie_Scene18;
vinnie_Scene18.__name__ = "vinnie.Scene18";
vinnie_Scene18.__super__ = vinnie_Scene;
vinnie_Scene18.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		vinnie_Scene.prototype.start.call(this);
		this.audio.stopMusic();
		this.audio.playSound(vinnie_Assets.dragollater,false);
		this.makeArt(vinnie_Assets.bgScene18,0,0);
		var button = this.document.createElement("button");
		button.style.position = "absolute";
		button.style.left = "288px";
		button.style.top = "152px";
		button.style.width = "105px";
		button.style.height = "29px";
		button.textContent = "End Game";
		button.style.fontFamily = "\"MS Sans Serif,sans-serif";
		button.style.fontSize = "13.5pt";
		button.style.fontWeight = "bold";
		button.onclick = $bind(this,this.onEndGameClicked);
		this.mainView.appendChild(button);
		var text = this.makeDialogBox(0,8,this.width,100,"yellow");
		text.style.fontFamily = "Times New Roman,serif";
		text.style.fontSize = "24pt";
		text.style.fontWeight = "700";
		text.style.textAlign = "center";
		text.textContent = "TO BE CONTINUED";
		this.game.unlockMedal(48594);
		this.inventory.show();
	}
	,onEndGameClicked: function() {
		var _gthis = this;
		this.audio.playSound(vinnie_Assets.death,false);
		this.message("Thank you for playing Vinnie's Tomb.  Be sure to continue the adventure with Vinnie's Tomb Chapter Two - Shine and Glow Vinnie.","Vinnie's Tomb Chapter One",vinnie_MessageIcon.None).then(function() {
			_gthis.exitGame();
		});
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadSound(vinnie_Assets.dragollater);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene18);
		this.game.preloader.preloadSound(vinnie_Assets.death);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerSound(vinnie_Assets.dragollater);
		this.audio.registerSound(vinnie_Assets.death);
	}
	,__class__: vinnie_Scene18
});
var vinnie_Scene2 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 398;
	this.height = 199;
	this.title = "Scene Two";
	this.allowEndDragging = false;
};
$hxClasses["vinnie.Scene2"] = vinnie_Scene2;
vinnie_Scene2.__name__ = "vinnie.Scene2";
vinnie_Scene2.__super__ = vinnie_Scene;
vinnie_Scene2.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.audio.playMusic(vinnie_Assets.musicScene2);
		this.makeArt(vinnie_Assets.bgScene2,0,0);
		this.crossedBridge = false;
		this.makeVinnie(352,88);
		this.sword = this.makeItem(vinnie_InventoryItemType.Sword,352,24,false,$bind(this,this.onSwordClicked));
		this.vinnieButton = null;
		this.makeHoverHotspot(32,0,321,201,function() {
			if(_gthis.isDraggingVinnie) {
				_gthis.resetVinnie();
				_gthis.message("Click on the parts of the bridge to cross the river.");
			}
		});
		this.makeClickHotspot(11,15,39,36,function() {
			_gthis.message("I could eat a cookie anytime.");
		});
		this.buttonBridge = [];
		var _g = 0;
		while(_g < 7) {
			var x = _g++;
			this.buttonBridge[x] = [];
			if(vinnie_Scene2.BRIDGE_PATTERN[x][0] != null) {
				this.buttonBridge[x][0] = this.makeButton(x,0,vinnie_Scene2.BRIDGE_PATTERN[x][0]);
			}
			if(vinnie_Scene2.BRIDGE_PATTERN[x][1] != null) {
				this.buttonBridge[x][1] = this.makeButton(x,1,vinnie_Scene2.BRIDGE_PATTERN[x][1]);
			}
			if(vinnie_Scene2.BRIDGE_PATTERN[x][2] != null) {
				this.buttonBridge[x][2] = this.makeButton(x,2,vinnie_Scene2.BRIDGE_PATTERN[x][2]);
			}
		}
		this.buttonBridge[6][1].disabled = false;
		this.exit = this.makeArt(vinnie_Assets.exitLeft,8,152,$bind(this,this.onExitClicked));
	}
	,resetVinnie: function() {
		this.cancelDrag();
		this.vinnie.style.left = "352px";
		this.vinnie.style.top = "88px";
		this.vinnie.style.display = "block";
		var button = this.buttonBridge[0][0];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[0][1];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[0][2];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[1][0];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[1][1];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[1][2];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[2][0];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[2][1];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[2][2];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[3][0];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[3][1];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[3][2];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[4][0];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[4][1];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[4][2];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[5][0];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[5][1];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[5][2];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[6][0];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[6][1];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		var button = this.buttonBridge[6][2];
		if(button != null) {
			button.style.backgroundImage = null;
			button.disabled = true;
		}
		this.buttonBridge[6][1].disabled = false;
		this.vinnieButton = null;
	}
	,makeButton: function(tileX,tileY,killer) {
		var button = this.document.createElement("button");
		button.style.position = "absolute";
		var x = 47 + tileX * 41;
		var y = 31 + tileY * 49;
		button.style.left = "" + x + "px";
		button.style.top = "" + y + "px";
		button.style.width = "" + 41 + "px";
		button.style.height = "" + 49 + "px";
		button.style.backgroundRepeat = "no-repeat";
		button.style.backgroundPosition = "5px 5px";
		button.disabled = true;
		var f = killer ? $bind(this,this.onKillerButtonClick) : $bind(this,this.onButtonClick);
		var _g = f;
		var x = tileX;
		var y = tileY;
		button.onclick = this.makeHandler(function() {
			_g(x,y);
		});
		this.mainView.appendChild(button);
		return button;
	}
	,onSwordClicked: function() {
		var _gthis = this;
		if(this.crossedBridge) {
			this.message("You can no longer reach the sword.");
		} else {
			this.audio.playSound(vinnie_Assets.getItem,true).then(function() {
				_gthis.inventory.addItem(vinnie_InventoryItemType.Sword);
				_gthis.inventory.show();
				_gthis.cancelDrag();
				_gthis.sword.parentNode.removeChild(_gthis.sword);
				_gthis.resetVinnie();
				_gthis.message("You collect a sword");
			});
		}
	}
	,onButtonClick: function(x,y) {
		this.cancelDrag();
		if(x == 0 && y == 1) {
			this.onBridgeCrossed();
			return;
		}
		this.vinnie.style.display = "none";
		if(this.vinnieButton != null) {
			this.vinnieButton.style.backgroundImage = "";
		}
		var button = this.buttonBridge[x][y];
		button.style.backgroundImage = "url(\"" + ("assets/art/" + vinnie_Assets.vinnie + ".gif") + "\")";
		this.vinnieButton = button;
		var _g = 0;
		while(_g < 7) {
			var ax = _g++;
			button = this.buttonBridge[ax][0];
			if(button != null) {
				var dx = Math.abs(ax - x);
				var dy = Math.abs(0 - y);
				button.disabled = dx + dy != 1;
			}
			button = this.buttonBridge[ax][1];
			if(button != null) {
				var dx1 = Math.abs(ax - x);
				var dy1 = Math.abs(1 - y);
				button.disabled = dx1 + dy1 != 1;
			}
			button = this.buttonBridge[ax][2];
			if(button != null) {
				var dx2 = Math.abs(ax - x);
				var dy2 = Math.abs(2 - y);
				button.disabled = dx2 + dy2 != 1;
			}
		}
	}
	,collapseBridge: function() {
		var _g = 0;
		var _g1 = this.buttonBridge;
		while(_g < _g1.length) {
			var col = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < col.length) {
				var button = col[_g2];
				++_g2;
				if(button != null && button.parentNode != null) {
					button.parentNode.removeChild(button);
				}
			}
		}
	}
	,onBridgeCrossed: function() {
		this.crossedBridge = true;
		this.allowDragging = false;
		this.collapseBridge();
		this.vinnie.style.display = "block";
		this.vinnie.style.left = "8px";
		this.vinnie.style.top = "88px";
		this.audio.playSound(vinnie_Assets.death);
		this.message("The bridge collapsed!  Fortunately, you have made it to the other side safely.");
	}
	,onKillerButtonClick: function(x,y) {
		var _gthis = this;
		this.game.unlockMedal(48590);
		this.message("OH NO!  The Bridge Collapsed!","Vinnie Drowns",vinnie_MessageIcon.Caution).then(function() {
			_gthis.collapseBridge();
			_gthis.vinnie = _gthis.makeArt(vinnie_Assets.vinnieDrown,128,88);
			_gthis.mainView.appendChild(_gthis.vinnie);
			if(_gthis.sword != null && _gthis.sword.parentNode != null) {
				_gthis.sword.parentNode.removeChild(_gthis.sword);
			}
			if(_gthis.exit != null && _gthis.exit.parentNode != null) {
				_gthis.exit.parentNode.removeChild(_gthis.exit);
			}
			_gthis.vinnieDied();
		});
	}
	,onExitClicked: function() {
		if(this.crossedBridge) {
			this.nextScene(vinnie_Scene3,this.inventory.hasItem(vinnie_InventoryItemType.Magnet) && this.inventory.hasItem(vinnie_InventoryItemType.Sword) ? "ALVIN" : null);
		} else {
			this.message("You must cross the river before you can travel to the next scene.","Hint");
		}
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene2);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene2);
		this.game.preloader.preloadArt(vinnie_Assets.exitLeft);
		this.game.preloader.preloadSound(vinnie_Assets.getItem);
		this.game.preloader.preloadSound(vinnie_Assets.death);
		this.game.preloader.preloadArt(vinnie_Assets.vinnieDrown);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene2);
		this.audio.registerSound(vinnie_Assets.getItem);
		this.audio.registerSound(vinnie_Assets.death);
	}
	,__class__: vinnie_Scene2
});
var vinnie_Scene4 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 377;
	this.height = 200;
	this.title = "Scene Four";
	this.allowDragging = false;
};
$hxClasses["vinnie.Scene4"] = vinnie_Scene4;
vinnie_Scene4.__name__ = "vinnie.Scene4";
vinnie_Scene4.__super__ = vinnie_Scene;
vinnie_Scene4.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.audio.playMusic(vinnie_Assets.musicScene4);
		this.mainView.style.backgroundColor = "black";
		this.makeArt(vinnie_Assets.partyBots,270,48);
		this.makeArt(vinnie_Assets.scene4Line1,87,95);
		this.makeArt(vinnie_Assets.scene4Line2,239,39);
		this.makeVinnie(72,136);
		this.partyBotsDialog = this.makeDialogBox(8,8,353,33,"white");
		this.vinnieDialog = this.makeDialogBox(8,56,169,49,"white");
		var speak = function(sound,partyBotsMsg,vinnieMsg) {
			_gthis.vinnieDialog.textContent = vinnieMsg;
			_gthis.partyBotsDialog.textContent = partyBotsMsg;
			_gthis.audio.playSound(sound,false);
		};
		var sound = vinnie_Assets.partyBots1;
		var partyBotsMsg = "Welcome to the Underworld!  You can get keen bargains on assorted undergarments.";
		var vinnieMsg = "That sounds just fine.  I'm trying to find the key to Vinnie's tomb.  Can you help?";
		var scrollContainer = function() {
			speak(sound,partyBotsMsg,vinnieMsg);
		};
		var sound1 = vinnie_Assets.partyBots2;
		var partyBotsMsg1 = "The key is hidden to have been hidden with the ancient Tibetan handkerchief.";
		var vinnieMsg1 = "Where should I start looking?";
		var scrollContainer1 = this.dialog([scrollContainer,function() {
			speak(sound1,partyBotsMsg1,vinnieMsg1);
		},function() {
			speak(vinnie_Assets.partyBots3,"There's an old queer snake who lives in a pile of garbage.  He may be able to help.  He's not far from here.","Thank you.  I'll try to find him.");
			if(_gthis.exit == null) {
				_gthis.exit = _gthis.makeArt(vinnie_Assets.exitLeft,8,136,$bind(_gthis,_gthis.onExitClicked));
			}
		}]);
		scrollContainer1.style.width = "" + (this.width - 8) + "px";
		scrollContainer1.style.border = "5px ridge white";
		scrollContainer1.style.height = "22px";
		scrollContainer1.style.background = "#c0c0c0";
		this.dialogScroller.style.width = "" + (this.width - 16) + "px";
		this.dialogScroller.style.top = "2px";
		this.dialogScroller.style.left = "3px";
	}
	,onExitClicked: function() {
		this.nextScene(vinnie_Scene5);
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene4);
		this.game.preloader.preloadArt(vinnie_Assets.partyBots);
		this.game.preloader.preloadArt(vinnie_Assets.scene4Line1);
		this.game.preloader.preloadArt(vinnie_Assets.scene4Line2);
		this.game.preloader.preloadSound(vinnie_Assets.partyBots1);
		this.game.preloader.preloadSound(vinnie_Assets.partyBots2);
		this.game.preloader.preloadSound(vinnie_Assets.partyBots3);
		this.game.preloader.preloadArt(vinnie_Assets.exitLeft);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene4);
		this.audio.registerSound(vinnie_Assets.partyBots1);
		this.audio.registerSound(vinnie_Assets.partyBots2);
		this.audio.registerSound(vinnie_Assets.partyBots3);
	}
	,__class__: vinnie_Scene4
});
var vinnie_Scene5 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 400;
	this.height = 197;
	this.title = "Scene Five";
};
$hxClasses["vinnie.Scene5"] = vinnie_Scene5;
vinnie_Scene5.__name__ = "vinnie.Scene5";
vinnie_Scene5.__super__ = vinnie_Scene;
vinnie_Scene5.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.audio.playMusic(vinnie_Assets.musicScene5);
		this.wallMoved = false;
		this.mainView.style.backgroundColor = "black";
		this.makeHoverHotspot(120,64,65,49,$bind(this,this.onPanelHover));
		this.makeClickHotspot(272,49,64,34,function() {
			_gthis.message("This is about as scary as it gets.  Enjoy it.");
		});
		this.makeArt(vinnie_Assets.exitLeft,8,64,$bind(this,this.onExitClicked));
		this.makeHoverHotspot(0,96,401,105,$bind(this,this.onWallHover));
		this.makeRect(0,112,121,89,"#808080");
		this.makeRect(0,112,121,89,"#808080");
		this.makeRect(184,112,217,89,"#808080");
		this.makeVinnie(136,24);
		this.makeRect(120,176,65,25,"#808080");
		this.makeRect(168,120,17,73,"#808080");
		this.makeRect(120,120,17,73,"#808080");
		this.panel1 = this.makeRect(120,112,65,17,"#C0C0C0");
		this.panel2 = this.makeRect(120,64,65,17,"#C0C0C0");
		this.panel2.style.display = "none";
		this.skull = this.makeItem(vinnie_InventoryItemType.SkullThatOozesBloodIntermittently,136,136,true,$bind(this,this.onSkullThatOozesBloodIntermittentlyClicked));
		this.inventory.show();
	}
	,onPanelHover: function() {
		var _gthis = this;
		if(!this.wallMoved && this.isEquipped(vinnie_InventoryItemType.Magnet)) {
			var pause = true;
			if(pause == null) {
				pause = false;
			}
			this.audio.playSound(vinnie_Assets.eureka,pause).then(function() {
				_gthis.wallMoved = true;
				_gthis.panel1.style.display = "none";
				_gthis.panel2.style.display = "block";
			});
		}
	}
	,onWallHover: function() {
		if(!this.wallMoved && this.isDraggingVinnie) {
			this.cancelDrag();
			this.message("You cannot break or penetrate the metal walls.","Hint");
		}
	}
	,onSkullThatOozesBloodIntermittentlyClicked: function() {
		if(this.wallMoved && this.skull != null) {
			this.skull.parentNode.removeChild(this.skull);
			this.obtainItem(vinnie_InventoryItemType.SkullThatOozesBloodIntermittently);
			this.skull = null;
		}
	}
	,onExitClicked: function() {
		this.nextScene(vinnie_Scene6);
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene5);
		this.game.preloader.preloadArt(vinnie_Assets.exitLeft);
		this.game.preloader.preloadSound(vinnie_Assets.eureka);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene5);
		this.audio.registerSound(vinnie_Assets.eureka);
	}
	,__class__: vinnie_Scene5
});
var vinnie_Scene6 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 400;
	this.height = 216;
	this.title = "Scene Six";
};
$hxClasses["vinnie.Scene6"] = vinnie_Scene6;
vinnie_Scene6.__name__ = "vinnie.Scene6";
vinnie_Scene6.__super__ = vinnie_Scene;
vinnie_Scene6.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.allowDragging = false;
		this.audio.playMusic(vinnie_Assets.musicScene6);
		this.makeArt(vinnie_Assets.bgScene6,0,0);
		this.makeClickHotspot(192,177,41,26,function() {
			_gthis.message("This game has nothing to do with Maurice Chevalier.");
		});
		this.queerSnakeDialog = this.makeDialogBox(116,11,265,49,"white");
		this.vinnieDialog = this.makeDialogBox(176,32,217,41,"white");
		var line1 = this.makeArt(vinnie_Assets.scene6Line1,129,61);
		var line2 = this.makeArt(vinnie_Assets.scene6Line2,279,79);
		this.makeVinnie(328,144);
		this.makeItem(vinnie_InventoryItemType.Diamond,264,176);
		this.makeItem(vinnie_InventoryItemType.Banana,368,168);
		this.queerSnake = this.makeArt(vinnie_Assets.queerSnake,23,51);
		this.queerSnake.onmouseover = this.makeHandler($bind(this,this.onSnakeMouseOver));
		this.key = this.makeArt(vinnie_Assets.key,71,170,function() {
			_gthis.message("The snake will not let you take the key.");
		});
		this.key.style.display = "none";
		this.exit = this.makeArt(vinnie_Assets.exitLeft,8,149,$bind(this,this.onExitClicked));
		this.exit.style.display = "none";
		this.dialog([function() {
			line1.style.display = "none";
			_gthis.queerSnakeDialog.textContent = "";
			line2.style.display = "block";
			_gthis.vinnieDialog.textContent = "You must be the queer snake that the party-bots told me about.";
			_gthis.audio.playSound(vinnie_Assets.vin1,false);
		},function() {
			line1.style.display = "block";
			_gthis.queerSnakeDialog.textContent = "Actually my brother is the queer one.";
			line2.style.display = "none";
			_gthis.vinnieDialog.textContent = "";
			_gthis.audio.playSound(vinnie_Assets.snake1,false);
		},function() {
			line1.style.display = "none";
			_gthis.queerSnakeDialog.textContent = "";
			line2.style.display = "block";
			_gthis.vinnieDialog.textContent = "Where is he?";
			_gthis.audio.playSound(vinnie_Assets.vin2,false);
		},function() {
			line1.style.display = "block";
			_gthis.queerSnakeDialog.textContent = "He went to Las Vegas for a gig.  He's bigger than Wayne Newton.";
			line2.style.display = "none";
			_gthis.vinnieDialog.textContent = "";
			_gthis.audio.playSound(vinnie_Assets.snake2,false);
		},function() {
			line1.style.display = "none";
			_gthis.queerSnakeDialog.textContent = "";
			line2.style.display = "block";
			_gthis.vinnieDialog.textContent = "Very interesting.  I'm looking for a key to Vinnie's Tomb.";
			_gthis.audio.playSound(vinnie_Assets.vin3,false);
		},function() {
			line1.style.display = "block";
			_gthis.queerSnakeDialog.textContent = "The key is with me.  I'm keeping it for him.  When he gets back from Vegas, he plans to find Vinnie's Tomb himself.";
			line2.style.display = "none";
			_gthis.vinnieDialog.textContent = "";
			_gthis.audio.playSound(vinnie_Assets.snake3,false);
		},function() {
			line1.style.display = "none";
			_gthis.queerSnakeDialog.textContent = "";
			line2.style.display = "block";
			_gthis.vinnieDialog.textContent = "Would you consider selling or trading the key?";
			_gthis.audio.playSound(vinnie_Assets.vin4,false);
		},function() {
			line1.style.display = "block";
			_gthis.queerSnakeDialog.textContent = "Sorry.  It belongs to my brother.  I cannot give it up without his permission.";
			line2.style.display = "none";
			_gthis.vinnieDialog.textContent = "";
			_gthis.audio.playSound(vinnie_Assets.snake4,false);
		},function() {
			_gthis.queerSnakeDialog.textContent = "";
			_gthis.vinnieDialog.textContent = "";
			line1.style.display = "none";
			line2.style.display = "none";
			_gthis.inventory.show();
			_gthis.exit.style.display = "block";
			_gthis.allowDragging = true;
		}]);
	}
	,onExitClicked: function() {
		this.nextScene(vinnie_Scene7);
	}
	,onSnakeMouseOver: function() {
		var _gthis = this;
		if(this.exit.style.display == "block") {
			if(this.isDraggingVinnie) {
				var pause = true;
				if(pause == null) {
					pause = false;
				}
				this.audio.playSound(vinnie_Assets.vin10,pause).then(function() {
					_gthis.message("Can I take a look at the key?","You ask the snake...").then(function() {
						var pause = true;
						if(pause == null) {
							pause = false;
						}
						_gthis.audio.playSound(vinnie_Assets.snake10,pause).then(function() {
							_gthis.message("I guess so.","The snake replies...");
							_gthis.key.style.display = "block";
							_gthis.cancelDrag();
						});
					});
				});
			} else if(this.equippedItem != null) {
				switch(this.equippedItem.type._hx_index) {
				case 0:
					var pause = true;
					if(pause == null) {
						pause = false;
					}
					this.audio.playSound(vinnie_Assets.vin6,pause).then(function() {
						_gthis.message("Will you trade the key for this magnet?","You ask the snake...").then(function() {
							var pause = true;
							if(pause == null) {
								pause = false;
							}
							_gthis.audio.playSound(vinnie_Assets.snake5,pause).then(function() {
								_gthis.message("That's a nifty magnet.  However, I don't think I need one.  The answer is no.","The snake replies...");
							});
						});
					});
					break;
				case 1:
					var pause = true;
					if(pause == null) {
						pause = false;
					}
					this.audio.playSound(vinnie_Assets.snake9,pause).then(function() {
						_gthis.message("Are you threatening me?  Please go away before I lick you with my forked tongue.","The snake hisses...");
					});
					break;
				case 2:
					var pause = true;
					if(pause == null) {
						pause = false;
					}
					this.audio.playSound(vinnie_Assets.vin9,pause).then(function() {
						_gthis.message("Will you trade the key for this skull that oozes blood intermittently?","You ask the snake...").then(function() {
							var pause = true;
							if(pause == null) {
								pause = false;
							}
							_gthis.audio.playSound(vinnie_Assets.snake8,pause).then(function() {
								_gthis.message("I vaguely recall my brother mentioning something about a skull.  I better not make the trade though.","The snake replies...");
							});
						});
					});
					break;
				case 3:
					var pause = true;
					if(pause == null) {
						pause = false;
					}
					this.audio.playSound(vinnie_Assets.vin7,pause).then(function() {
						_gthis.message("Will you trade the key for this diamond?","You ask the snake...").then(function() {
							var pause = true;
							if(pause == null) {
								pause = false;
							}
							_gthis.audio.playSound(vinnie_Assets.snake6,pause).then(function() {
								_gthis.message("No.  Diamonds are worthless in Underworld.  Why do you think it was lying in the garbage?","The snake replies...");
							});
						});
					});
					break;
				case 4:
					var pause = true;
					if(pause == null) {
						pause = false;
					}
					this.audio.playSound(vinnie_Assets.vin8,pause).then(function() {
						_gthis.message("Will you trade the key for this banana?","You ask the snake...").then(function() {
							var pause = true;
							if(pause == null) {
								pause = false;
							}
							_gthis.audio.playSound(vinnie_Assets.snake7,pause).then(function() {
								_gthis.message("What do I look like?  I'm a snake, not a monkey.","The snake replies...");
							});
						});
					});
					break;
				default:
				}
				this.equipItem(null);
			}
		}
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene6);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene6);
		this.game.preloader.preloadArt(vinnie_Assets.scene6Line1);
		this.game.preloader.preloadArt(vinnie_Assets.scene6Line2);
		this.game.preloader.preloadArt(vinnie_Assets.queerSnake);
		this.game.preloader.preloadArt(vinnie_Assets.key);
		this.game.preloader.preloadArt(vinnie_Assets.exitLeft);
		this.game.preloader.preloadSound(vinnie_Assets.vin1);
		this.game.preloader.preloadSound(vinnie_Assets.snake1);
		this.game.preloader.preloadSound(vinnie_Assets.vin2);
		this.game.preloader.preloadSound(vinnie_Assets.snake2);
		this.game.preloader.preloadSound(vinnie_Assets.vin3);
		this.game.preloader.preloadSound(vinnie_Assets.snake3);
		this.game.preloader.preloadSound(vinnie_Assets.vin4);
		this.game.preloader.preloadSound(vinnie_Assets.snake4);
		this.game.preloader.preloadSound(vinnie_Assets.vin10);
		this.game.preloader.preloadSound(vinnie_Assets.snake10);
		this.game.preloader.preloadSound(vinnie_Assets.vin6);
		this.game.preloader.preloadSound(vinnie_Assets.snake5);
		this.game.preloader.preloadSound(vinnie_Assets.vin7);
		this.game.preloader.preloadSound(vinnie_Assets.snake6);
		this.game.preloader.preloadSound(vinnie_Assets.vin8);
		this.game.preloader.preloadSound(vinnie_Assets.snake7);
		this.game.preloader.preloadSound(vinnie_Assets.vin9);
		this.game.preloader.preloadSound(vinnie_Assets.snake8);
		this.game.preloader.preloadSound(vinnie_Assets.snake9);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene6);
		this.audio.registerSound(vinnie_Assets.vin1);
		this.audio.registerSound(vinnie_Assets.snake1);
		this.audio.registerSound(vinnie_Assets.vin2);
		this.audio.registerSound(vinnie_Assets.snake2);
		this.audio.registerSound(vinnie_Assets.vin3);
		this.audio.registerSound(vinnie_Assets.snake3);
		this.audio.registerSound(vinnie_Assets.vin4);
		this.audio.registerSound(vinnie_Assets.snake4);
		this.audio.registerSound(vinnie_Assets.vin10);
		this.audio.registerSound(vinnie_Assets.snake10);
		this.audio.registerSound(vinnie_Assets.vin6);
		this.audio.registerSound(vinnie_Assets.snake5);
		this.audio.registerSound(vinnie_Assets.vin7);
		this.audio.registerSound(vinnie_Assets.snake6);
		this.audio.registerSound(vinnie_Assets.vin8);
		this.audio.registerSound(vinnie_Assets.snake7);
		this.audio.registerSound(vinnie_Assets.vin9);
		this.audio.registerSound(vinnie_Assets.snake8);
		this.audio.registerSound(vinnie_Assets.snake9);
	}
	,__class__: vinnie_Scene6
});
var vinnie_Scene7 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 399;
	this.height = 199;
	this.title = "Scene Seven";
	this.allowEndDragging = false;
};
$hxClasses["vinnie.Scene7"] = vinnie_Scene7;
vinnie_Scene7.__name__ = "vinnie.Scene7";
vinnie_Scene7.__super__ = vinnie_Scene;
vinnie_Scene7.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.inventory.show();
		this.mainView.style.background = "black";
		this.doorOpened = false;
		this.audio.playMusic(vinnie_Assets.musicScene7);
		this.makeArt(vinnie_Assets.bgScene7,0,0);
		this.makeArt(vinnie_Assets.funLandEntrance,-6,19);
		this.makeHoverHotspot(0,2,400,117,$bind(this,this.cancelDrag));
		this.makeClickHotspot(178,182,36,18,function() {
			_gthis.message("Yet another useless hidden message.");
		});
		this.makeClickHotspot(88,17,23,27,function() {
			_gthis.message("You wonder what that could be.");
		});
		this.makeClickHotspot(272,128,85,48,$bind(this,this.onInsetClicked));
		this.makeVinnie(348,163);
		this.line = this.makeArt(vinnie_Assets.scene7Line,97,28);
		this.line.style.display = "none";
		this.makeClickHotspot(15,114,121,72,$bind(this,this.onEntranceClicked));
		this.door = this.document.createElement("button");
		this.door.style.position = "absolute";
		this.door.style.left = "24px";
		this.door.style.top = "123px";
		this.door.style.width = "106px";
		this.door.style.height = "58px";
		this.door.onclick = this.makeHandler($bind(this,this.onDoorClicked));
		this.mainView.appendChild(this.door);
	}
	,onDoorClicked: function() {
		if(!this.doorOpened) {
			if(this.equippedItem == null) {
				this.message("The entrance to Fun Land appears to be closed.  That's a shame because Donny Osmond is hosting a benefit concert there for seven legged spiders from a windy city.");
			} else {
				this.message("That does not open the door.");
			}
		}
	}
	,onInsetClicked: function() {
		var _gthis = this;
		if(!this.doorOpened) {
			if(this.equippedItem == null) {
				this.message("You wonder what that could be.");
			} else if(this.equippedItem.type != vinnie_InventoryItemType.Diamond) {
				this.message("That will not help open the entrance");
			} else {
				var pause = true;
				if(pause == null) {
					pause = false;
				}
				this.audio.playSound(vinnie_Assets.eureka,pause).then(function() {
					_gthis.line.style.display = "block";
					_gthis.door.style.display = "none";
					_gthis.doorOpened = true;
					_gthis.diamond = _gthis.makeArt(vinnie_Assets.diamond,302,137,$bind(_gthis,_gthis.onInsetClicked));
					_gthis.inventory.removeItem(vinnie_InventoryItemType.Diamond);
					_gthis.equipItem(null);
				});
			}
		} else if(this.diamond != null) {
			if(this.equippedItem == null) {
				this.message("The diamond is stuck.");
			} else if(this.equippedItem.type != vinnie_InventoryItemType.Sword) {
				this.message("That does not do much.");
				this.equipItem(null);
			} else {
				var pause = true;
				if(pause == null) {
					pause = false;
				}
				this.audio.playSound(vinnie_Assets.getItem,pause).then(function() {
					_gthis.message("You pry the glittery diamond back out of the hole with the sword.","Vinnie's Tomb Chapter One",vinnie_MessageIcon.None);
					_gthis.line.style.display = "none";
					_gthis.inventory.addItem(vinnie_InventoryItemType.Diamond);
					_gthis.diamond.parentNode.removeChild(_gthis.diamond);
					_gthis.diamond = null;
					_gthis.equipItem(null);
				});
			}
		}
	}
	,onEntranceClicked: function() {
		if(this.doorOpened) {
			this.nextScene(vinnie_Scene8,"LALAL","You enter Fun Land and complete Scene Seven");
		}
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene7);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene7);
		this.game.preloader.preloadArt(vinnie_Assets.funLandEntrance);
		this.game.preloader.preloadArt(vinnie_Assets.scene7Line);
		this.game.preloader.preloadSound(vinnie_Assets.eureka);
		this.game.preloader.preloadArt(vinnie_Assets.diamond);
		this.game.preloader.preloadSound(vinnie_Assets.getItem);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene7);
		this.audio.registerSound(vinnie_Assets.eureka);
		this.audio.registerSound(vinnie_Assets.getItem);
	}
	,__class__: vinnie_Scene7
});
var vinnie_Scene9 = function(game) {
	vinnie_Scene.call(this,game);
	this.width = 401;
	this.height = 216;
	this.title = "Scene Nine";
};
$hxClasses["vinnie.Scene9"] = vinnie_Scene9;
vinnie_Scene9.__name__ = "vinnie.Scene9";
vinnie_Scene9.__super__ = vinnie_Scene;
vinnie_Scene9.prototype = $extend(vinnie_Scene.prototype,{
	start: function() {
		var _gthis = this;
		vinnie_Scene.prototype.start.call(this);
		this.allowDragging = false;
		this.audio.playMusic(vinnie_Assets.musicScene9);
		this.bg = this.makeArt(vinnie_Assets.bgScene9,0,0);
		this.makeHoverHotspot(0,0,401,137,$bind(this,this.cancelDrag));
		this.exit = this.makeArt(vinnie_Assets.exitLeft,0,112,$bind(this,this.onExitClicked));
		this.exit.style.display = "none";
		this.line1 = this.makeArt(vinnie_Assets.scene9Line1,184,40);
		this.vinnieDialog = this.makeDialogBox(192,96,201,49,"black","white");
		this.vinnieDialog.style.fontWeight = "normal";
		this.makeItem(vinnie_InventoryItemType.Shades,216,168);
		this.makeVinnie(312,152);
		this.horseDialog = this.makeDialogBox(200,8,193,81,"black","white");
		this.horseDialog.style.fontWeight = "normal";
		this.line2 = this.makeArt(vinnie_Assets.scene9Line2,264,145);
		var horseSpeak = function(sound,dialog) {
			_gthis.vinnieDialog.style.display = "none";
			_gthis.horseDialog.style.display = "block";
			_gthis.horseDialog.textContent = dialog;
			_gthis.line1.style.display = "block";
			_gthis.line2.style.display = "none";
			_gthis.audio.playSound(sound,false);
		};
		var vinnieSpeak = function(sound,dialog) {
			_gthis.vinnieDialog.style.display = "block";
			_gthis.vinnieDialog.textContent = dialog;
			_gthis.horseDialog.style.display = "none";
			_gthis.line1.style.display = "none";
			_gthis.line2.style.display = "block";
			_gthis.audio.playSound(sound,false);
		};
		var sound = vinnie_Assets.horse2;
		var dialog = "Hello.  How are you this fine morning?";
		var tmp = function() {
			horseSpeak(sound,dialog);
		};
		var sound1 = vinnie_Assets.vin17;
		var dialog1 = "Who is that?  I can’t see anyone there.";
		var tmp1 = function() {
			vinnieSpeak(sound1,dialog1);
		};
		var sound2 = vinnie_Assets.horse2;
		var dialog2 = "I’m an invisible horse.";
		var tmp2 = function() {
			horseSpeak(sound2,dialog2);
		};
		var sound3 = vinnie_Assets.vin18;
		var dialog3 = "Why are you invisible?";
		var tmp3 = function() {
			vinnieSpeak(sound3,dialog3);
		};
		var sound4 = vinnie_Assets.horse3;
		var dialog4 = "The designer of this game can’t draw horses.";
		var tmp4 = function() {
			horseSpeak(sound4,dialog4);
		};
		var sound5 = vinnie_Assets.vin19;
		var dialog5 = "The designer can’t draw at all.";
		var tmp5 = function() {
			vinnieSpeak(sound5,dialog5);
		};
		var sound6 = vinnie_Assets.horse4;
		var dialog6 = "Would you like to see how I look?";
		var tmp6 = function() {
			horseSpeak(sound6,dialog6);
		};
		var sound7 = vinnie_Assets.vin20;
		var dialog7 = "Not really, but go ahead.";
		var tmp7 = function() {
			vinnieSpeak(sound7,dialog7);
		};
		var sound8 = vinnie_Assets.vin21;
		var dialog8 = "I think you should stay invisible.";
		var tmp8 = function() {
			vinnieSpeak(sound8,dialog8);
		};
		var sound9 = vinnie_Assets.horse6;
		var dialog9 = "I guess you’re right.";
		var tmp9 = function() {
			horseSpeak(sound9,dialog9);
		};
		var sound10 = vinnie_Assets.vin22;
		var dialog10 = "Do you know anything about Vinnie’s Tomb?";
		var tmp10 = function() {
			vinnieSpeak(sound10,dialog10);
		};
		var sound11 = vinnie_Assets.horse7;
		var dialog11 = "According to legend it’s a tomb where a clown named Vinnie and his band of chickens were buried twelve centuries ago.";
		var tmp11 = function() {
			horseSpeak(sound11,dialog11);
		};
		var sound12 = vinnie_Assets.vin23;
		var dialog12 = "The legend is wrong.  There were no chickens.";
		var tmp12 = function() {
			vinnieSpeak(sound12,dialog12);
		};
		var sound13 = vinnie_Assets.horse8;
		var dialog13 = "Well, the chickens added some colour to the story.";
		var tmp13 = function() {
			horseSpeak(sound13,dialog13);
		};
		var sound14 = vinnie_Assets.vin24;
		var dialog14 = "I need the key to Vinnie’s tomb, but the snake will not part with it.";
		var tmp14 = function() {
			vinnieSpeak(sound14,dialog14);
		};
		var sound15 = vinnie_Assets.horse9;
		var dialog15 = "That does not matter.  I have a dozen keys to Vinnie’s tomb.";
		var tmp15 = function() {
			horseSpeak(sound15,dialog15);
		};
		var sound16 = vinnie_Assets.vin25;
		var dialog16 = "You do?";
		var tmp16 = function() {
			vinnieSpeak(sound16,dialog16);
		};
		var sound17 = vinnie_Assets.horse10;
		var dialog17 = "Sure.  That fool snake and his queer lounge king brother think they have a monopoly on Vinnie’s Tomb keys.  They don’t know that I have amassed a collection of them along with expensive trinkets from the Franklin mint.";
		var tmp17 = function() {
			horseSpeak(sound17,dialog17);
		};
		var sound18 = vinnie_Assets.vin26;
		var dialog18 = "Would you please give me a key?";
		var tmp18 = function() {
			vinnieSpeak(sound18,dialog18);
		};
		var sound19 = vinnie_Assets.horse11;
		var dialog19 = "I'll give you one for five hundred dollars.";
		var tmp19 = function() {
			horseSpeak(sound19,dialog19);
		};
		var sound20 = vinnie_Assets.vin27;
		var dialog20 = "I don’t have any money.";
		var tmp20 = function() {
			vinnieSpeak(sound20,dialog20);
		};
		var sound21 = vinnie_Assets.horse12;
		var dialog21 = "Then you better get a job.";
		var tmp21 = function() {
			horseSpeak(sound21,dialog21);
		};
		var sound22 = vinnie_Assets.vin28;
		var dialog22 = "Where can I find a job?";
		var tmp22 = function() {
			vinnieSpeak(sound22,dialog22);
		};
		var sound23 = vinnie_Assets.horse13;
		var dialog23 = "There aren’t any jobs here in Fun Land.";
		var tmp23 = function() {
			horseSpeak(sound23,dialog23);
		};
		var sound24 = vinnie_Assets.vin29;
		var dialog24 = "This is most irritating.";
		var tmp24 = function() {
			vinnieSpeak(sound24,dialog24);
		};
		var sound25 = vinnie_Assets.horse14;
		var dialog25 = "Wait a minute.  There is a handsome reward out for the capture of that loud mouthed beast.";
		var tmp25 = function() {
			horseSpeak(sound25,dialog25);
		};
		var sound26 = vinnie_Assets.vin30;
		var dialog26 = "What loud mouthed beast?";
		var tmp26 = function() {
			vinnieSpeak(sound26,dialog26);
		};
		var sound27 = vinnie_Assets.horse15;
		var dialog27 = "The one that keeps us all night singing 'Climb Every Mountain' and 'Can’t Help Lovin’ Dat Man'.";
		var tmp27 = function() {
			horseSpeak(sound27,dialog27);
		};
		var sound28 = vinnie_Assets.vin31;
		var dialog28 = "I have heard of this monster already.  I guess I’ll have to find him.";
		this.dialog([tmp,tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7,function() {
			horseSpeak(vinnie_Assets.horse5,"What do you think?");
			_gthis.bg.src = "assets/art/" + vinnie_Assets.bgScene9Visible + ".gif";
		},tmp8,tmp9,tmp10,tmp11,tmp12,tmp13,tmp14,tmp15,tmp16,tmp17,tmp18,tmp19,tmp20,tmp21,tmp22,tmp23,tmp24,tmp25,tmp26,tmp27,function() {
			vinnieSpeak(sound28,dialog28);
		},function() {
			horseSpeak(vinnie_Assets.horse16,"Good luck.  You’re going to need it.");
			_gthis.allowDragging = true;
			_gthis.exit.style.display = "block";
		}]);
		this.audio.playSound(vinnie_Assets.horse1,false);
	}
	,onExitClicked: function() {
		this.nextScene(vinnie_Scene10);
	}
	,preload: function() {
		vinnie_Scene.prototype.preload.call(this);
		this.game.preloader.preloadMusic(vinnie_Assets.musicScene9);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene9);
		this.game.preloader.preloadArt(vinnie_Assets.exitLeft);
		this.game.preloader.preloadArt(vinnie_Assets.scene9Line1);
		this.game.preloader.preloadArt(vinnie_Assets.scene9Line2);
		this.game.preloader.preloadSound(vinnie_Assets.horse2);
		this.game.preloader.preloadSound(vinnie_Assets.vin17);
		this.game.preloader.preloadSound(vinnie_Assets.horse2);
		this.game.preloader.preloadSound(vinnie_Assets.vin18);
		this.game.preloader.preloadSound(vinnie_Assets.horse3);
		this.game.preloader.preloadSound(vinnie_Assets.vin19);
		this.game.preloader.preloadSound(vinnie_Assets.horse4);
		this.game.preloader.preloadSound(vinnie_Assets.vin20);
		this.game.preloader.preloadSound(vinnie_Assets.horse5);
		this.game.preloader.preloadArt(vinnie_Assets.bgScene9Visible);
		this.game.preloader.preloadSound(vinnie_Assets.vin21);
		this.game.preloader.preloadSound(vinnie_Assets.horse6);
		this.game.preloader.preloadSound(vinnie_Assets.vin22);
		this.game.preloader.preloadSound(vinnie_Assets.horse7);
		this.game.preloader.preloadSound(vinnie_Assets.vin23);
		this.game.preloader.preloadSound(vinnie_Assets.horse8);
		this.game.preloader.preloadSound(vinnie_Assets.vin24);
		this.game.preloader.preloadSound(vinnie_Assets.horse9);
		this.game.preloader.preloadSound(vinnie_Assets.vin25);
		this.game.preloader.preloadSound(vinnie_Assets.horse10);
		this.game.preloader.preloadSound(vinnie_Assets.vin26);
		this.game.preloader.preloadSound(vinnie_Assets.horse11);
		this.game.preloader.preloadSound(vinnie_Assets.vin27);
		this.game.preloader.preloadSound(vinnie_Assets.horse12);
		this.game.preloader.preloadSound(vinnie_Assets.vin28);
		this.game.preloader.preloadSound(vinnie_Assets.horse13);
		this.game.preloader.preloadSound(vinnie_Assets.vin29);
		this.game.preloader.preloadSound(vinnie_Assets.horse14);
		this.game.preloader.preloadSound(vinnie_Assets.vin30);
		this.game.preloader.preloadSound(vinnie_Assets.horse15);
		this.game.preloader.preloadSound(vinnie_Assets.vin31);
		this.game.preloader.preloadSound(vinnie_Assets.horse16);
		this.game.preloader.preloadSound(vinnie_Assets.horse1);
	}
	,registerSounds: function() {
		vinnie_Scene.prototype.registerSounds.call(this);
		this.audio.registerMusic(vinnie_Assets.musicScene9);
		this.audio.registerSound(vinnie_Assets.horse2);
		this.audio.registerSound(vinnie_Assets.vin17);
		this.audio.registerSound(vinnie_Assets.horse2);
		this.audio.registerSound(vinnie_Assets.vin18);
		this.audio.registerSound(vinnie_Assets.horse3);
		this.audio.registerSound(vinnie_Assets.vin19);
		this.audio.registerSound(vinnie_Assets.horse4);
		this.audio.registerSound(vinnie_Assets.vin20);
		this.audio.registerSound(vinnie_Assets.horse5);
		this.audio.registerSound(vinnie_Assets.vin21);
		this.audio.registerSound(vinnie_Assets.horse6);
		this.audio.registerSound(vinnie_Assets.vin22);
		this.audio.registerSound(vinnie_Assets.horse7);
		this.audio.registerSound(vinnie_Assets.vin23);
		this.audio.registerSound(vinnie_Assets.horse8);
		this.audio.registerSound(vinnie_Assets.vin24);
		this.audio.registerSound(vinnie_Assets.horse9);
		this.audio.registerSound(vinnie_Assets.vin25);
		this.audio.registerSound(vinnie_Assets.horse10);
		this.audio.registerSound(vinnie_Assets.vin26);
		this.audio.registerSound(vinnie_Assets.horse11);
		this.audio.registerSound(vinnie_Assets.vin27);
		this.audio.registerSound(vinnie_Assets.horse12);
		this.audio.registerSound(vinnie_Assets.vin28);
		this.audio.registerSound(vinnie_Assets.horse13);
		this.audio.registerSound(vinnie_Assets.vin29);
		this.audio.registerSound(vinnie_Assets.horse14);
		this.audio.registerSound(vinnie_Assets.vin30);
		this.audio.registerSound(vinnie_Assets.horse15);
		this.audio.registerSound(vinnie_Assets.vin31);
		this.audio.registerSound(vinnie_Assets.horse16);
		this.audio.registerSound(vinnie_Assets.horse1);
	}
	,__class__: vinnie_Scene9
});
var vinnie_Vinnie = function() {
	var body = window.document.body;
	body.style.margin = "0";
	body.style.padding = "0";
	body.style.overflow = "hidden";
	body.style.position = "aboslute";
	body.style.width = "100%";
	body.style.height = "100%";
	body.style.backgroundColor = "#ffe0c0";
	body.style.setProperty("-webkit-font-smoothing","none");
	body.style.setProperty("font-smooth","never");
	body.style.setProperty("-webkit-user-select","none");
	body.style.setProperty("image-rendering","optimizeSpeed");
	body.style.setProperty("image-rendering","-moz-crisp-edges");
	body.style.setProperty("image-rendering","-o-crisp-edges;");
	body.style.setProperty("image-rendering","-webkit-optimize-contrast");
	body.style.setProperty("image-rendering","optimize-contrast");
	body.style.setProperty("image-rendering","pixelated");
	body.style.setProperty("-ms-interpolation-mode","nearest-neighbor");
	body.style.setProperty("font-smooth","never");
	body.style.setProperty("-webkit-user-select","none");
	body.style.setProperty("user-select","none");
	body.ondragstart = function(_) {
		return false;
	};
	this.isMobile = new EReg("Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini","").match($global.navigator.userAgent);
	if(this.isMobile) {
		var sheet = window.document.styleSheets[0];
		if(sheet == null) {
			var style = window.document.createElement("style");
			style.type = "text/css";
			window.document.head.appendChild(style);
			sheet = style.sheet;
		}
		if(sheet.insertRule != null) {
			sheet.insertRule("::-webkit-scrollbar { -webkit-appearance: none; }",sheet.cssRules.length);
			sheet.insertRule("::-webkit-scrollbar:horizontal { height: 12px; }",sheet.cssRules.length);
			sheet.insertRule("::-webkit-scrollbar-thumb { background-color: rgba(0.5, 0.5, 0.5, .5); border: 2px solid #808080; }",sheet.cssRules.length);
			sheet.insertRule("::-webkit-scrollbar-track { background-color: #c0c0c0; }",sheet.cssRules.length);
		}
	}
	this.preloader = new vinnie_Preloader(this);
	this.audio = new vinnie_AudioManager(this);
	window.addEventListener("resize",$bind(this,this.onResize));
	this.inventory = new vinnie_Inventory(this);
	this.isPaused = false;
	this.bonusScenes = false;
	this.bonusSceneCompleted = [];
	this.shadesOn = false;
	this.primedAudio = false;
	this.loadingScreen = window.document.createElement("div");
	this.loadingScreen.style.position = "absolute";
	this.loadingScreen.style.left = "50%";
	this.loadingScreen.style.top = "50%";
	this.loadingScreen.style.width = "314px";
	this.loadingScreen.style.height = "81px";
	this.loadingScreen.style.color = "red";
	this.loadingScreen.style.textAlign = "center";
	this.loadingScreen.style.fontFamily = "\"Times New Roman\",serif";
	this.loadingScreen.style.fontSize = "20.25pt";
	this.loadingScreen.style.fontWeight = "700";
	this.loadingScreen.style.marginLeft = "-157px";
	this.loadingScreen.style.marginTop = "-40px";
	this.loadingScreen.style.textShadow = "-1px -1px black";
	this.loadingScreen.style.cursor = "default";
	this.loadingScreen.textContent = "Loading Vinnie's Tomb, Please Wait...";
	this.loadingScreen.style.zIndex = "10000";
	this.playButton = window.document.createElement("button");
	this.playButton.textContent = "Play";
	this.playButton.style.position = "absolute";
	this.playButton.style.bottom = "0";
	this.playButton.style.width = "314px";
	this.playButton.style.height = "180px";
	this.playButton.style.fontSize = "30pt";
	this.playButton.style.display = "none";
	this.loadingScreen.appendChild(this.playButton);
	window.document.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.startScene(new vinnie_MainMenu(this));
};
$hxClasses["vinnie.Vinnie"] = vinnie_Vinnie;
vinnie_Vinnie.__name__ = "vinnie.Vinnie";
vinnie_Vinnie.main = function() {
	new vinnie_Vinnie();
};
vinnie_Vinnie.prototype = {
	checkSceneLoaded: function(scene) {
		this.stopLoadingScreenTimer();
		this.loadingTimer = new haxe_Timer(100);
		this.loadingTimer.run = $bind(this,this.showLoadingScreen);
		var _g = $bind(this,this.onPreloadComplete);
		var scene1 = scene;
		var tmp = function() {
			_g(scene1);
		};
		this.preloader.onPreloadComplete = tmp;
		scene.preload();
		this.preloader.beginPreload();
	}
	,preloadNextScene: function() {
		if(this.scene != null) {
			var nextSceneClass = null;
			var className = null;
			if(js_Boot.getClass(this.scene) == vinnie_MainMenu) {
				nextSceneClass = vinnie_Scene1;
			} else {
				var c = js_Boot.getClass(this.scene);
				var sceneNum = Std.parseInt(HxOverrides.substr(c.__name__,"vinnie.Scene".length,null));
				className = "vinnie.Scene" + (sceneNum + 1);
				nextSceneClass = $hxClasses[className];
			}
			if(nextSceneClass != null) {
				var nextScene = Type.createInstance(nextSceneClass,[this]);
				nextScene.preload();
				this.preloader.beginPreload();
			}
		}
	}
	,unlockMedal: function(medalId) {
		if(this.ngio != null && this.ngio.user != null) {
			this.ngio.callComponent("Medal.unlock",{ id : js_Boot.__cast(medalId , Int)},function(result) {
			});
		}
	}
	,startScene: function(scene) {
		var oldScene = this.scene;
		if(oldScene != null) {
			oldScene.end();
		}
		this.checkSceneLoaded(scene);
	}
	,onPreloadComplete: function(scene) {
		var _gthis = this;
		this.preloader.onPreloadComplete = null;
		if(!this.primedAudio) {
			this.primedAudio = true;
			this.playButton.style.display = "block";
			this.playButton.onclick = function(_) {
				_gthis.playButton.style.display = "none";
				_gthis.audio.primeSounds();
				_gthis.onSceneLoaded(scene);
			};
		} else {
			this.onSceneLoaded(scene);
		}
	}
	,onSceneLoaded: function(scene) {
		this.hideLoadingScreen();
		this.scene = scene;
		scene.start();
		this.preloadNextScene();
	}
	,onKeyDown: function(event) {
		var F1 = 112;
		if(event.keyCode == F1) {
			this.help();
			return false;
		}
		var TAB = 9;
		if(this.isPaused && event.keyCode == 9) {
			event.preventDefault();
			return false;
		}
		return true;
	}
	,help: function() {
		window.open("manual/Vintomb.html","_new");
	}
	,showLoadingScreen: function() {
		if(this.loadingScreen.parentNode == null) {
			this.stopLoadingScreenTimer();
			window.document.body.appendChild(this.loadingScreen);
		}
	}
	,stopLoadingScreenTimer: function() {
		if(this.loadingTimer != null) {
			this.loadingTimer.stop();
			this.loadingTimer = null;
		}
	}
	,hideLoadingScreen: function() {
		this.stopLoadingScreenTimer();
		if(this.loadingScreen != null && this.loadingScreen.parentNode != null) {
			this.loadingScreen.parentNode.removeChild(this.loadingScreen);
		}
	}
	,onResize: function(_) {
		if(this.scene != null) {
			this.scene.updatePosition();
		}
	}
	,__class__: vinnie_Vinnie
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
vinnie_ActionScene.ACTION_SCENE_DATA = [[{ x : 196, y : 132},{ x : 13, y : 128},{ x : 89, y : 75},{ x : 144, y : 240},{ x : 382, y : 173},{ x : 301, y : 159}],[{ x : 249, y : 262},{ x : 2, y : 72},{ x : 87, y : 73},{ x : 188, y : 266},{ x : 398, y : 64},{ x : 398, y : 70}],[{ x : 85, y : 231},{ x : 378, y : 75},{ x : 315, y : 110},{ x : 10, y : 264},{ x : 239, y : 156},{ x : 167, y : 192}]];
vinnie_Assets.title = "title";
vinnie_Assets.lightBulb = "light-bulb";
vinnie_Assets.exitLeft = "exit-left";
vinnie_Assets.exitRight = "exit-right";
vinnie_Assets.bolt = "bolt";
vinnie_Assets.scene4Line1 = "scene4-line1";
vinnie_Assets.scene4Line2 = "scene4-line2";
vinnie_Assets.scene6Line1 = "scene6-line1";
vinnie_Assets.scene6Line2 = "scene6-line2";
vinnie_Assets.funLandEntrance = "fun-land-entrance";
vinnie_Assets.scene7Line = "scene7-line";
vinnie_Assets.ufo = "ufo";
vinnie_Assets.scene8Line1 = "scene8-line1";
vinnie_Assets.scene8Line2 = "scene8-line2";
vinnie_Assets.scene9Line1 = "scene9-line1";
vinnie_Assets.scene9Line2 = "scene9-line2";
vinnie_Assets.scene10Line1 = "scene10-line1";
vinnie_Assets.scene10Line2 = "scene10-line2";
vinnie_Assets.book = "book";
vinnie_Assets.twig = "twig";
vinnie_Assets.slingshot = "slingshot";
vinnie_Assets.sphereOfLight = "sphere-of-light";
vinnie_Assets.bloodRockCover = "blood-rock-cover";
vinnie_Assets.scene14Line1 = "scene14-line1";
vinnie_Assets.scene14Line2 = "scene14-line2";
vinnie_Assets.scene17door = "scene17-door";
vinnie_Assets.cdBeam = "cd-beam";
vinnie_Assets.info = "info";
vinnie_Assets.caution = "caution";
vinnie_Assets.msgboxClose = "msgbox-close";
vinnie_Assets.bgScene1 = "scene1";
vinnie_Assets.bgScene2 = "scene2";
vinnie_Assets.bgScene3 = "scene3";
vinnie_Assets.bgScene6 = "scene6";
vinnie_Assets.bgScene7 = "scene7";
vinnie_Assets.bgScene8 = "scene8";
vinnie_Assets.bgScene9 = "scene9";
vinnie_Assets.bgScene9Visible = "scene9-visible";
vinnie_Assets.bgScene10 = "scene10";
vinnie_Assets.bgScene10Awake = "scene10-awake";
vinnie_Assets.bgScene12 = "scene12";
vinnie_Assets.bgScene13 = "scene13";
vinnie_Assets.bgScene14 = "scene14";
vinnie_Assets.bgScene15 = "scene15";
vinnie_Assets.bgScene16 = "scene16";
vinnie_Assets.bgScene17 = "scene17";
vinnie_Assets.bgScene18 = "scene18";
vinnie_Assets.bgAction = "action";
vinnie_Assets.sadEthel = "sad-ethel";
vinnie_Assets.partyBots = "party-bots";
vinnie_Assets.queerSnake = "queer-snake";
vinnie_Assets.funlander = "funlander";
vinnie_Assets.jerk = "jerk";
vinnie_Assets.eyeGuy = "eye";
vinnie_Assets.vinnie = "vinnie";
vinnie_Assets.vinnieShades = "vinnie-shades";
vinnie_Assets.vinnieDrown = "vinnie-drown";
vinnie_Assets.vinnieFried = "vinnie-fried";
vinnie_Assets.magnet = "magnet";
vinnie_Assets.sword = "sword";
vinnie_Assets.skull = "skull";
vinnie_Assets.bloodySkull = "skull-blood";
vinnie_Assets.diamond = "diamond";
vinnie_Assets.banana = "banana";
vinnie_Assets.key = "key";
vinnie_Assets.underwear = "underwear";
vinnie_Assets.cd = "cd";
vinnie_Assets.money = "money";
vinnie_Assets.eightBall = "8ball";
vinnie_Assets.cheese = "cheese";
vinnie_Assets.shades = "shades";
vinnie_Assets.toolBox = "toolbox";
vinnie_Assets.getItem = "hap1.mp3";
vinnie_Assets.completeScene = "hap2.mp3";
vinnie_Assets.eureka = "hap3.mp3";
vinnie_Assets.death = "death.mp3";
vinnie_Assets.teleport = "teleport.mp3";
vinnie_Assets.trainWhistle = "WHI.MP3";
vinnie_Assets.sphereZap = "elev.mp3";
vinnie_Assets.dragollater = "SCREAM.MP3";
vinnie_Assets.narIntro = "INTRON.MP3";
vinnie_Assets.nar1 = "NAR1.MP3";
vinnie_Assets.nar3 = "NAR3.MP3";
vinnie_Assets.nar4 = "NAR4.MP3";
vinnie_Assets.vin1 = "Vin1.mp3";
vinnie_Assets.vin2 = "Vin2.mp3";
vinnie_Assets.vin3 = "Vin3.mp3";
vinnie_Assets.vin4 = "Vin4.mp3";
vinnie_Assets.vin6 = "vin6.mp3";
vinnie_Assets.vin7 = "Vin7.mp3";
vinnie_Assets.vin8 = "Vin8.mp3";
vinnie_Assets.vin9 = "Vin9.mp3";
vinnie_Assets.vin10 = "Vin10.mp3";
vinnie_Assets.vin11 = "Vin11.mp3";
vinnie_Assets.vin12 = "Vin12.mp3";
vinnie_Assets.vin13 = "Vin13.mp3";
vinnie_Assets.vin14 = "Vin14.mp3";
vinnie_Assets.vin15 = "Vin15.mp3";
vinnie_Assets.vin16 = "Vin16.mp3";
vinnie_Assets.vin17 = "Vin17.mp3";
vinnie_Assets.vin18 = "Vin18.mp3";
vinnie_Assets.vin19 = "Vin19.mp3";
vinnie_Assets.vin20 = "Vin20.mp3";
vinnie_Assets.vin21 = "Vin21.mp3";
vinnie_Assets.vin22 = "Vin22.mp3";
vinnie_Assets.vin23 = "Vin23.mp3";
vinnie_Assets.vin24 = "Vin24.mp3";
vinnie_Assets.vin25 = "Vin25.mp3";
vinnie_Assets.vin26 = "Vin26.mp3";
vinnie_Assets.vin27 = "Vin27.mp3";
vinnie_Assets.vin28 = "Vin28.mp3";
vinnie_Assets.vin29 = "Vin29.mp3";
vinnie_Assets.vin30 = "Vin30.mp3";
vinnie_Assets.vin31 = "Vin31.mp3";
vinnie_Assets.vin32 = "Vin32.mp3";
vinnie_Assets.vin33 = "Vin33.mp3";
vinnie_Assets.vin34 = "Vin34.mp3";
vinnie_Assets.vin35 = "Vin35.mp3";
vinnie_Assets.vin36 = "Vin36.mp3";
vinnie_Assets.vin37 = "Vin37.mp3";
vinnie_Assets.vin38 = "Vin38.mp3";
vinnie_Assets.vin40 = "Vin40.mp3";
vinnie_Assets.vin41 = "Vin41.mp3";
vinnie_Assets.vin42 = "Vin42.mp3";
vinnie_Assets.vin44 = "Vin44.mp3";
vinnie_Assets.partyBots1 = "Bot1.mp3";
vinnie_Assets.partyBots2 = "bot2.mp3";
vinnie_Assets.partyBots3 = "bot3.mp3";
vinnie_Assets.snake1 = "snake1.mp3";
vinnie_Assets.snake2 = "snake2.mp3";
vinnie_Assets.snake3 = "snake3.mp3";
vinnie_Assets.snake4 = "snake4.mp3";
vinnie_Assets.snake5 = "snake5.mp3";
vinnie_Assets.snake6 = "snake6.mp3";
vinnie_Assets.snake7 = "snake7.mp3";
vinnie_Assets.snake8 = "snake8.mp3";
vinnie_Assets.snake9 = "snake9.mp3";
vinnie_Assets.snake10 = "snake10.mp3";
vinnie_Assets.guy1 = "guy1.mp3";
vinnie_Assets.guy2 = "guy2.mp3";
vinnie_Assets.guy3 = "guy3.mp3";
vinnie_Assets.guy4 = "guy4.mp3";
vinnie_Assets.guy5 = "guy5.mp3";
vinnie_Assets.horse1 = "horse1.mp3";
vinnie_Assets.horse2 = "horse2.mp3";
vinnie_Assets.horse3 = "horse3.mp3";
vinnie_Assets.horse4 = "horse4.mp3";
vinnie_Assets.horse5 = "horse5.mp3";
vinnie_Assets.horse6 = "horse6.mp3";
vinnie_Assets.horse7 = "horse7.mp3";
vinnie_Assets.horse8 = "horse8.mp3";
vinnie_Assets.horse9 = "horse9.mp3";
vinnie_Assets.horse10 = "horse10.mp3";
vinnie_Assets.horse11 = "horse11.mp3";
vinnie_Assets.horse12 = "horse12.mp3";
vinnie_Assets.horse13 = "horse13.mp3";
vinnie_Assets.horse14 = "horse14.mp3";
vinnie_Assets.horse15 = "horse15.mp3";
vinnie_Assets.horse16 = "horse16.mp3";
vinnie_Assets.sing1 = "SING1.MP3";
vinnie_Assets.sing2 = "SING2.MP3";
vinnie_Assets.sing3 = "SING3.MP3";
vinnie_Assets.sing4 = "SING4.MP3";
vinnie_Assets.sing5 = "SING5.MP3";
vinnie_Assets.sing6 = "SING6.MP3";
vinnie_Assets.sing7 = "SING7.MP3";
vinnie_Assets.sing8 = "SING8.MP3";
vinnie_Assets.sing9 = "SING9.MP3";
vinnie_Assets.sing10 = "SING10.MP3";
vinnie_Assets.sing11 = "SING11.MP3";
vinnie_Assets.eye1 = "EYE1.MP3";
vinnie_Assets.eye2 = "EYE2.MP3";
vinnie_Assets.eye3 = "EYE3.MP3";
vinnie_Assets.musicIntro = "intro";
vinnie_Assets.musicScene1 = "scene1";
vinnie_Assets.musicScene2 = "scene2";
vinnie_Assets.musicScene3 = "scene3";
vinnie_Assets.musicScene4 = "scene4";
vinnie_Assets.musicScene5 = "scene5";
vinnie_Assets.musicScene6 = "scene6";
vinnie_Assets.musicScene7 = "scene7";
vinnie_Assets.musicScene8 = "scene8";
vinnie_Assets.musicScene9 = "scene9";
vinnie_Inventory.itemInfo = (function($this) {
	var $r;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(vinnie_InventoryItemType.Magnet,{ type : vinnie_InventoryItemType.Magnet, name : "a magnet", icon : vinnie_Assets.magnet, x : 0, y : 8});
	_g.set(vinnie_InventoryItemType.Sword,{ type : vinnie_InventoryItemType.Sword, name : "a sword", icon : vinnie_Assets.sword, x : 40, y : 8});
	_g.set(vinnie_InventoryItemType.SkullThatOozesBloodIntermittently,{ type : vinnie_InventoryItemType.SkullThatOozesBloodIntermittently, name : "the skull that oozes blood intermittently.", icon : vinnie_Assets.skull, x : 80, y : 8});
	_g.set(vinnie_InventoryItemType.Diamond,{ type : vinnie_InventoryItemType.Diamond, name : "the glittery diamond.", icon : vinnie_Assets.diamond, x : 112, y : 8});
	_g.set(vinnie_InventoryItemType.Banana,{ type : vinnie_InventoryItemType.Banana, name : "an overripe banana.", icon : vinnie_Assets.banana, x : 144, y : 8});
	_g.set(vinnie_InventoryItemType.Key,{ type : vinnie_InventoryItemType.Key, name : "key.", icon : vinnie_Assets.key, x : 176, y : 48});
	_g.set(vinnie_InventoryItemType.Underwear,{ type : vinnie_InventoryItemType.Underwear, name : "underwear.", icon : vinnie_Assets.underwear, x : 136, y : 48});
	_g.set(vinnie_InventoryItemType.CD,{ type : vinnie_InventoryItemType.CD, name : "a the compact disc.", icon : vinnie_Assets.cd, x : 96, y : 48});
	_g.set(vinnie_InventoryItemType.Money,{ type : vinnie_InventoryItemType.Money, name : "money.", icon : vinnie_Assets.money, x : 48, y : 40});
	_g.set(vinnie_InventoryItemType.EightBall,{ type : vinnie_InventoryItemType.EightBall, name : "8-ball.", icon : vinnie_Assets.eightBall, x : 8, y : 48});
	_g.set(vinnie_InventoryItemType.Cheese,{ type : vinnie_InventoryItemType.Cheese, name : "cheese.", icon : vinnie_Assets.cheese, x : 216, y : 40});
	_g.set(vinnie_InventoryItemType.Shades,{ type : vinnie_InventoryItemType.Shades, name : "a pair of cool shades.  You wonder why you keep finding things just lying around.", icon : vinnie_Assets.shades, x : 232, y : 8});
	_g.set(vinnie_InventoryItemType.ToolBox,{ type : vinnie_InventoryItemType.ToolBox, name : "a metal box.", icon : vinnie_Assets.toolBox, x : 192, y : 8});
	$r = _g;
	return $r;
}(this));
vinnie_MainMenu.PASSCODE_GAMES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["ALVIN"] = { scene : vinnie_Scene3, inventory : [vinnie_InventoryItemType.Magnet,vinnie_InventoryItemType.Sword], shades : false};
	_g.h["LALAL"] = { scene : vinnie_Scene8, inventory : [vinnie_InventoryItemType.Magnet,vinnie_InventoryItemType.Sword,vinnie_InventoryItemType.SkullThatOozesBloodIntermittently,vinnie_InventoryItemType.Diamond,vinnie_InventoryItemType.Banana], shades : false};
	_g.h["SETTA"] = { scene : vinnie_Scene12, inventory : [vinnie_InventoryItemType.Magnet,vinnie_InventoryItemType.Sword,vinnie_InventoryItemType.SkullThatOozesBloodIntermittently,vinnie_InventoryItemType.Diamond,vinnie_InventoryItemType.Banana,vinnie_InventoryItemType.ToolBox,vinnie_InventoryItemType.CD,vinnie_InventoryItemType.Underwear,vinnie_InventoryItemType.Key,vinnie_InventoryItemType.Cheese], shades : true};
	_g.h["METTA"] = { scene : vinnie_Scene12, inventory : [vinnie_InventoryItemType.Magnet,vinnie_InventoryItemType.Sword,vinnie_InventoryItemType.SkullThatOozesBloodIntermittently,vinnie_InventoryItemType.Diamond,vinnie_InventoryItemType.Banana,vinnie_InventoryItemType.ToolBox,vinnie_InventoryItemType.EightBall,vinnie_InventoryItemType.CD,vinnie_InventoryItemType.Underwear,vinnie_InventoryItemType.Key,vinnie_InventoryItemType.Cheese], shades : true};
	_g.h["NETTA"] = { scene : vinnie_Scene12, inventory : [vinnie_InventoryItemType.Magnet,vinnie_InventoryItemType.Sword,vinnie_InventoryItemType.SkullThatOozesBloodIntermittently,vinnie_InventoryItemType.Diamond,vinnie_InventoryItemType.Banana,vinnie_InventoryItemType.ToolBox,vinnie_InventoryItemType.CD,vinnie_InventoryItemType.Underwear,vinnie_InventoryItemType.Key,vinnie_InventoryItemType.Cheese], shades : false};
	_g.h["RETTA"] = { scene : vinnie_Scene12, inventory : [vinnie_InventoryItemType.Magnet,vinnie_InventoryItemType.Sword,vinnie_InventoryItemType.SkullThatOozesBloodIntermittently,vinnie_InventoryItemType.Diamond,vinnie_InventoryItemType.Banana,vinnie_InventoryItemType.ToolBox,vinnie_InventoryItemType.EightBall,vinnie_InventoryItemType.CD,vinnie_InventoryItemType.Underwear,vinnie_InventoryItemType.Key,vinnie_InventoryItemType.Cheese], shades : false};
	$r = _g;
	return $r;
}(this));
vinnie_Scene2.BRIDGE_PATTERN = [[null,false,null],[false,false,false],[true,true,false],[true,true,false],[false,false,false],[false,false,false],[null,false,null]];
vinnie_Vinnie.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
